
cv03_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08001cbc  08001cbc  00011cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d6c  08001d6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d6c  08001d6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d6c  08001d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d6c  08001d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08001d80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001d80  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bcf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010fd  00000000  00000000  00024c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000598  00000000  00000000  00025d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004f0  00000000  00000000  00026298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b54a  00000000  00000000  00026788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000054ab  00000000  00000000  00031cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00040793  00000000  00000000  0003717d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00077910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001274  00000000  00000000  0007798c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ca4 	.word	0x08001ca4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001ca4 	.word	0x08001ca4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <sct_led>:
#include "sct.h"
#include <stm32f0xx.h>
#include "main.h"

void sct_led(uint32_t value)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	for(uint32_t j = 0; j < 32; j++)
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
 800022c:	e01b      	b.n	8000266 <sct_led+0x46>
	{

		HAL_GPIO_WritePin(SCT_SDI_GPIO_Port, SCT_SDI_Pin, value & 1);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	2201      	movs	r2, #1
 8000234:	4013      	ands	r3, r2
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4814      	ldr	r0, [pc, #80]	; (800028c <sct_led+0x6c>)
 800023a:	001a      	movs	r2, r3
 800023c:	2110      	movs	r1, #16
 800023e:	f000 fd27 	bl	8000c90 <HAL_GPIO_WritePin>
		value >>= 1;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	085b      	lsrs	r3, r3, #1
 8000246:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <sct_led+0x6c>)
 800024a:	2201      	movs	r2, #1
 800024c:	2108      	movs	r1, #8
 800024e:	0018      	movs	r0, r3
 8000250:	f000 fd1e 	bl	8000c90 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <sct_led+0x6c>)
 8000256:	2200      	movs	r2, #0
 8000258:	2108      	movs	r1, #8
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fd18 	bl	8000c90 <HAL_GPIO_WritePin>
	for(uint32_t j = 0; j < 32; j++)
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	3301      	adds	r3, #1
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b1f      	cmp	r3, #31
 800026a:	d9e0      	bls.n	800022e <sct_led+0xe>
	}
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <sct_led+0x6c>)
 800026e:	2201      	movs	r2, #1
 8000270:	2120      	movs	r1, #32
 8000272:	0018      	movs	r0, r3
 8000274:	f000 fd0c 	bl	8000c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <sct_led+0x6c>)
 800027a:	2200      	movs	r2, #0
 800027c:	2120      	movs	r1, #32
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fd06 	bl	8000c90 <HAL_GPIO_WritePin>

}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b004      	add	sp, #16
 800028a:	bd80      	pop	{r7, pc}
 800028c:	48000400 	.word	0x48000400

08000290 <sct_init>:

void sct_init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	sct_led(0);
 8000294:	2000      	movs	r0, #0
 8000296:	f7ff ffc3 	bl	8000220 <sct_led>
}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <sct_value>:

void sct_value(uint16_t value)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	0002      	movs	r2, r0
 80002a8:	1dbb      	adds	r3, r7, #6
 80002aa:	801a      	strh	r2, [r3, #0]
					0b0111000000001111 << 0,
					0b0110000000001111 << 0,
			},
	};

	reg |= reg_values [0][value / 100 % 10];
 80002ac:	1dbb      	adds	r3, r7, #6
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	2164      	movs	r1, #100	; 0x64
 80002b2:	0018      	movs	r0, r3
 80002b4:	f7ff ff28 	bl	8000108 <__udivsi3>
 80002b8:	0003      	movs	r3, r0
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	210a      	movs	r1, #10
 80002be:	0018      	movs	r0, r3
 80002c0:	f7ff ffa8 	bl	8000214 <__aeabi_uidivmod>
 80002c4:	000b      	movs	r3, r1
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	001a      	movs	r2, r3
 80002ca:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <sct_value+0xa8>)
 80002cc:	0092      	lsls	r2, r2, #2
 80002ce:	58d2      	ldr	r2, [r2, r3]
 80002d0:	4b1e      	ldr	r3, [pc, #120]	; (800034c <sct_value+0xac>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	431a      	orrs	r2, r3
 80002d6:	4b1d      	ldr	r3, [pc, #116]	; (800034c <sct_value+0xac>)
 80002d8:	601a      	str	r2, [r3, #0]
	reg |= reg_values [1][value / 10 % 10];
 80002da:	1dbb      	adds	r3, r7, #6
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	210a      	movs	r1, #10
 80002e0:	0018      	movs	r0, r3
 80002e2:	f7ff ff11 	bl	8000108 <__udivsi3>
 80002e6:	0003      	movs	r3, r0
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	210a      	movs	r1, #10
 80002ec:	0018      	movs	r0, r3
 80002ee:	f7ff ff91 	bl	8000214 <__aeabi_uidivmod>
 80002f2:	000b      	movs	r3, r1
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	001a      	movs	r2, r3
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <sct_value+0xa8>)
 80002fa:	320a      	adds	r2, #10
 80002fc:	0092      	lsls	r2, r2, #2
 80002fe:	58d2      	ldr	r2, [r2, r3]
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <sct_value+0xac>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	431a      	orrs	r2, r3
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <sct_value+0xac>)
 8000308:	601a      	str	r2, [r3, #0]
	reg |= reg_values [2][value % 10];
 800030a:	1dbb      	adds	r3, r7, #6
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	210a      	movs	r1, #10
 8000310:	0018      	movs	r0, r3
 8000312:	f7ff ff7f 	bl	8000214 <__aeabi_uidivmod>
 8000316:	000b      	movs	r3, r1
 8000318:	b29b      	uxth	r3, r3
 800031a:	001a      	movs	r2, r3
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <sct_value+0xa8>)
 800031e:	3214      	adds	r2, #20
 8000320:	0092      	lsls	r2, r2, #2
 8000322:	58d2      	ldr	r2, [r2, r3]
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <sct_value+0xac>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	431a      	orrs	r2, r3
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <sct_value+0xac>)
 800032c:	601a      	str	r2, [r3, #0]

	sct_led(reg);
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <sct_value+0xac>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	0018      	movs	r0, r3
 8000334:	f7ff ff74 	bl	8000220 <sct_led>
	reg = 0;
 8000338:	4b04      	ldr	r3, [pc, #16]	; (800034c <sct_value+0xac>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]

}
 800033e:	46c0      	nop			; (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	08001cdc 	.word	0x08001cdc
 800034c:	20000028 	.word	0x20000028

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000356:	f000 f9f1 	bl	800073c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035a:	f000 f821 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035e:	f000 f899 	bl	8000494 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000362:	f000 f867 	bl	8000434 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	sct_init();
 8000366:	f7ff ff93 	bl	8000290 <sct_init>

	while (1)
	{
		for (uint16_t j = 0; j<=999; j+=111)
 800036a:	1dbb      	adds	r3, r7, #6
 800036c:	2200      	movs	r2, #0
 800036e:	801a      	strh	r2, [r3, #0]
 8000370:	e00e      	b.n	8000390 <main+0x40>
		{
			sct_value(j);
 8000372:	1dbb      	adds	r3, r7, #6
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	0018      	movs	r0, r3
 8000378:	f7ff ff92 	bl	80002a0 <sct_value>
			HAL_Delay(1000);
 800037c:	23fa      	movs	r3, #250	; 0xfa
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	0018      	movs	r0, r3
 8000382:	f000 fa3f 	bl	8000804 <HAL_Delay>
		for (uint16_t j = 0; j<=999; j+=111)
 8000386:	1dbb      	adds	r3, r7, #6
 8000388:	1dba      	adds	r2, r7, #6
 800038a:	8812      	ldrh	r2, [r2, #0]
 800038c:	326f      	adds	r2, #111	; 0x6f
 800038e:	801a      	strh	r2, [r3, #0]
 8000390:	1dbb      	adds	r3, r7, #6
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	4a01      	ldr	r2, [pc, #4]	; (800039c <main+0x4c>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d9eb      	bls.n	8000372 <main+0x22>
 800039a:	e7e6      	b.n	800036a <main+0x1a>
 800039c:	000003e7 	.word	0x000003e7

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b091      	sub	sp, #68	; 0x44
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	2410      	movs	r4, #16
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	0018      	movs	r0, r3
 80003ac:	2330      	movs	r3, #48	; 0x30
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f001 fc6f 	bl	8001c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b6:	003b      	movs	r3, r7
 80003b8:	0018      	movs	r0, r3
 80003ba:	2310      	movs	r3, #16
 80003bc:	001a      	movs	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f001 fc68 	bl	8001c94 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c4:	0021      	movs	r1, r4
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2202      	movs	r2, #2
 80003ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2201      	movs	r2, #1
 80003d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2210      	movs	r2, #16
 80003d6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2202      	movs	r2, #2
 80003dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2200      	movs	r2, #0
 80003e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	22a0      	movs	r2, #160	; 0xa0
 80003e8:	0392      	lsls	r2, r2, #14
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ec:	187b      	adds	r3, r7, r1
 80003ee:	2200      	movs	r2, #0
 80003f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	187b      	adds	r3, r7, r1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fc69 	bl	8000ccc <HAL_RCC_OscConfig>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003fe:	f000 f8df 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	003b      	movs	r3, r7
 8000404:	2207      	movs	r2, #7
 8000406:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	003b      	movs	r3, r7
 800040a:	2202      	movs	r2, #2
 800040c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	003b      	movs	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	003b      	movs	r3, r7
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041a:	003b      	movs	r3, r7
 800041c:	2101      	movs	r1, #1
 800041e:	0018      	movs	r0, r3
 8000420:	f000 ff70 	bl	8001304 <HAL_RCC_ClockConfig>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000428:	f000 f8ca 	bl	80005c0 <Error_Handler>
  }
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b011      	add	sp, #68	; 0x44
 8000432:	bd90      	pop	{r4, r7, pc}

08000434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_USART2_UART_Init+0x58>)
 800043a:	4a15      	ldr	r2, [pc, #84]	; (8000490 <MX_USART2_UART_Init+0x5c>)
 800043c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000440:	2296      	movs	r2, #150	; 0x96
 8000442:	0212      	lsls	r2, r2, #8
 8000444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000446:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_USART2_UART_Init+0x58>)
 800044e:	2200      	movs	r2, #0
 8000450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_USART2_UART_Init+0x58>)
 800045a:	220c      	movs	r2, #12
 800045c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <MX_USART2_UART_Init+0x58>)
 8000478:	0018      	movs	r0, r3
 800047a:	f001 f895 	bl	80015a8 <HAL_UART_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000482:	f000 f89d 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000002c 	.word	0x2000002c
 8000490:	40004400 	.word	0x40004400

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b08b      	sub	sp, #44	; 0x2c
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	2414      	movs	r4, #20
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2314      	movs	r3, #20
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f001 fbf5 	bl	8001c94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b41      	ldr	r3, [pc, #260]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b40      	ldr	r3, [pc, #256]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	0309      	lsls	r1, r1, #12
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b3d      	ldr	r3, [pc, #244]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	031b      	lsls	r3, r3, #12
 80004c0:	4013      	ands	r3, r2
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4b3a      	ldr	r3, [pc, #232]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b39      	ldr	r3, [pc, #228]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	03c9      	lsls	r1, r1, #15
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b36      	ldr	r3, [pc, #216]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	03db      	lsls	r3, r3, #15
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b33      	ldr	r3, [pc, #204]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b32      	ldr	r3, [pc, #200]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	0289      	lsls	r1, r1, #10
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b2f      	ldr	r3, [pc, #188]	; (80005b0 <MX_GPIO_Init+0x11c>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	029b      	lsls	r3, r3, #10
 80004f8:	4013      	ands	r3, r2
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fe:	4b2c      	ldr	r3, [pc, #176]	; (80005b0 <MX_GPIO_Init+0x11c>)
 8000500:	695a      	ldr	r2, [r3, #20]
 8000502:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <MX_GPIO_Init+0x11c>)
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	02c9      	lsls	r1, r1, #11
 8000508:	430a      	orrs	r2, r1
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <MX_GPIO_Init+0x11c>)
 800050e:	695a      	ldr	r2, [r3, #20]
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	02db      	lsls	r3, r3, #11
 8000514:	4013      	ands	r3, r2
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800051a:	2390      	movs	r3, #144	; 0x90
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	2200      	movs	r2, #0
 8000520:	2120      	movs	r1, #32
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fbb4 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 8000528:	2387      	movs	r3, #135	; 0x87
 800052a:	00db      	lsls	r3, r3, #3
 800052c:	4821      	ldr	r0, [pc, #132]	; (80005b4 <MX_GPIO_Init+0x120>)
 800052e:	2200      	movs	r2, #0
 8000530:	0019      	movs	r1, r3
 8000532:	f000 fbad 	bl	8000c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0192      	lsls	r2, r2, #6
 800053c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	4a1d      	ldr	r2, [pc, #116]	; (80005b8 <MX_GPIO_Init+0x124>)
 8000542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800054a:	193b      	adds	r3, r7, r4
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <MX_GPIO_Init+0x128>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f000 fa2d 	bl	80009b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000556:	0021      	movs	r1, r4
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2220      	movs	r2, #32
 800055c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2201      	movs	r2, #1
 8000562:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000570:	000c      	movs	r4, r1
 8000572:	187a      	adds	r2, r7, r1
 8000574:	2390      	movs	r3, #144	; 0x90
 8000576:	05db      	lsls	r3, r3, #23
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fa18 	bl	80009b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8000580:	0021      	movs	r1, r4
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2287      	movs	r2, #135	; 0x87
 8000586:	00d2      	lsls	r2, r2, #3
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059c:	187b      	adds	r3, r7, r1
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <MX_GPIO_Init+0x120>)
 80005a0:	0019      	movs	r1, r3
 80005a2:	0010      	movs	r0, r2
 80005a4:	f000 fa04 	bl	80009b0 <HAL_GPIO_Init>

}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b00b      	add	sp, #44	; 0x2c
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400
 80005b8:	10210000 	.word	0x10210000
 80005bc:	48000800 	.word	0x48000800

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	699a      	ldr	r2, [r3, #24]
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	2101      	movs	r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	619a      	str	r2, [r3, #24]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0549      	lsls	r1, r1, #21
 80005f4:	430a      	orrs	r2, r1
 80005f6:	61da      	str	r2, [r3, #28]
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_MspInit+0x44>)
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	055b      	lsls	r3, r3, #21
 8000600:	4013      	ands	r3, r2
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	2314      	movs	r3, #20
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	0018      	movs	r0, r3
 8000622:	2314      	movs	r3, #20
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f001 fb34 	bl	8001c94 <memset>
  if(huart->Instance==USART2)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <HAL_UART_MspInit+0x90>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d132      	bne.n	800069c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000638:	69da      	ldr	r2, [r3, #28]
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_UART_MspInit+0x94>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0289      	lsls	r1, r1, #10
 8000640:	430a      	orrs	r2, r1
 8000642:	61da      	str	r2, [r3, #28]
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000646:	69da      	ldr	r2, [r3, #28]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000654:	695a      	ldr	r2, [r3, #20]
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	0289      	lsls	r1, r1, #10
 800065c:	430a      	orrs	r2, r1
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_UART_MspInit+0x94>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	029b      	lsls	r3, r3, #10
 8000668:	4013      	ands	r3, r2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800066e:	2114      	movs	r1, #20
 8000670:	187b      	adds	r3, r7, r1
 8000672:	220c      	movs	r2, #12
 8000674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2202      	movs	r2, #2
 800067a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2201      	movs	r2, #1
 800068c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068e:	187a      	adds	r2, r7, r1
 8000690:	2390      	movs	r3, #144	; 0x90
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f98a 	bl	80009b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b00a      	add	sp, #40	; 0x28
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40004400 	.word	0x40004400
 80006a8:	40021000 	.word	0x40021000

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f87a 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490e      	ldr	r1, [pc, #56]	; (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0e      	ldr	r2, [pc, #56]	; (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0b      	ldr	r4, [pc, #44]	; (8000734 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000712:	f7ff ffe4 	bl	80006de <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000716:	f001 fa99 	bl	8001c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fe19 	bl	8000350 <main>

0800071e <LoopForever>:

LoopForever:
    b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   r0, =_estack
 8000720:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800072c:	08001d74 	.word	0x08001d74
  ldr r2, =_sbss
 8000730:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000734:	200000b0 	.word	0x200000b0

08000738 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC1_IRQHandler>
	...

0800073c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <HAL_Init+0x24>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_Init+0x24>)
 8000746:	2110      	movs	r1, #16
 8000748:	430a      	orrs	r2, r1
 800074a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f809 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000752:	f7ff ff3b 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <HAL_InitTick+0x5c>)
 800076e:	681c      	ldr	r4, [r3, #0]
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_InitTick+0x60>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	0019      	movs	r1, r3
 8000776:	23fa      	movs	r3, #250	; 0xfa
 8000778:	0098      	lsls	r0, r3, #2
 800077a:	f7ff fcc5 	bl	8000108 <__udivsi3>
 800077e:	0003      	movs	r3, r0
 8000780:	0019      	movs	r1, r3
 8000782:	0020      	movs	r0, r4
 8000784:	f7ff fcc0 	bl	8000108 <__udivsi3>
 8000788:	0003      	movs	r3, r0
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f903 	bl	8000996 <HAL_SYSTICK_Config>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	e00f      	b.n	80007b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d80b      	bhi.n	80007b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	2301      	movs	r3, #1
 80007a2:	425b      	negs	r3, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 f8e0 	bl	800096c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_InitTick+0x64>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b003      	add	sp, #12
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x20>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	18d2      	adds	r2, r2, r3
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_IncTick+0x20>)
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000008 	.word	0x20000008
 80007ec:	200000ac 	.word	0x200000ac

080007f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <HAL_GetTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	200000ac 	.word	0x200000ac

08000804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800080c:	f7ff fff0 	bl	80007f0 <HAL_GetTick>
 8000810:	0003      	movs	r3, r0
 8000812:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	d005      	beq.n	800082a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_Delay+0x40>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	001a      	movs	r2, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	189b      	adds	r3, r3, r2
 8000828:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	f7ff ffe0 	bl	80007f0 <HAL_GetTick>
 8000830:	0002      	movs	r2, r0
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	429a      	cmp	r2, r3
 800083a:	d8f7      	bhi.n	800082c <HAL_Delay+0x28>
  {
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000008 	.word	0x20000008

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	0002      	movs	r2, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b7f      	cmp	r3, #127	; 0x7f
 800085c:	d828      	bhi.n	80008b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085e:	4a2f      	ldr	r2, [pc, #188]	; (800091c <__NVIC_SetPriority+0xd4>)
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b25b      	sxtb	r3, r3
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	33c0      	adds	r3, #192	; 0xc0
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	589b      	ldr	r3, [r3, r2]
 800086e:	1dfa      	adds	r2, r7, #7
 8000870:	7812      	ldrb	r2, [r2, #0]
 8000872:	0011      	movs	r1, r2
 8000874:	2203      	movs	r2, #3
 8000876:	400a      	ands	r2, r1
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	21ff      	movs	r1, #255	; 0xff
 800087c:	4091      	lsls	r1, r2
 800087e:	000a      	movs	r2, r1
 8000880:	43d2      	mvns	r2, r2
 8000882:	401a      	ands	r2, r3
 8000884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	22ff      	movs	r2, #255	; 0xff
 800088c:	401a      	ands	r2, r3
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	0018      	movs	r0, r3
 8000894:	2303      	movs	r3, #3
 8000896:	4003      	ands	r3, r0
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089c:	481f      	ldr	r0, [pc, #124]	; (800091c <__NVIC_SetPriority+0xd4>)
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	089b      	lsrs	r3, r3, #2
 80008a6:	430a      	orrs	r2, r1
 80008a8:	33c0      	adds	r3, #192	; 0xc0
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ae:	e031      	b.n	8000914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <__NVIC_SetPriority+0xd8>)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0019      	movs	r1, r3
 80008b8:	230f      	movs	r3, #15
 80008ba:	400b      	ands	r3, r1
 80008bc:	3b08      	subs	r3, #8
 80008be:	089b      	lsrs	r3, r3, #2
 80008c0:	3306      	adds	r3, #6
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	3304      	adds	r3, #4
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	0011      	movs	r1, r2
 80008d0:	2203      	movs	r2, #3
 80008d2:	400a      	ands	r2, r1
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	21ff      	movs	r1, #255	; 0xff
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	43d2      	mvns	r2, r2
 80008de:	401a      	ands	r2, r3
 80008e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	401a      	ands	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	4003      	ands	r3, r0
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <__NVIC_SetPriority+0xd8>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	001c      	movs	r4, r3
 8000900:	230f      	movs	r3, #15
 8000902:	4023      	ands	r3, r4
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	430a      	orrs	r2, r1
 800090a:	3306      	adds	r3, #6
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	18c3      	adds	r3, r0, r3
 8000910:	3304      	adds	r3, #4
 8000912:	601a      	str	r2, [r3, #0]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b003      	add	sp, #12
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <SysTick_Config+0x40>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d901      	bls.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e010      	b.n	800095c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <SysTick_Config+0x44>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	3a01      	subs	r2, #1
 8000940:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	2301      	movs	r3, #1
 8000944:	425b      	negs	r3, r3
 8000946:	2103      	movs	r1, #3
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff ff7d 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SysTick_Config+0x44>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Config+0x44>)
 8000956:	2207      	movs	r2, #7
 8000958:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095a:	2300      	movs	r3, #0
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}
 8000964:	00ffffff 	.word	0x00ffffff
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	210f      	movs	r1, #15
 8000978:	187b      	adds	r3, r7, r1
 800097a:	1c02      	adds	r2, r0, #0
 800097c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b25b      	sxtb	r3, r3
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b004      	add	sp, #16
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ffbf 	bl	8000924 <SysTick_Config>
 80009a6:	0003      	movs	r3, r0
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	e14f      	b.n	8000c60 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2101      	movs	r1, #1
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4091      	lsls	r1, r2
 80009ca:	000a      	movs	r2, r1
 80009cc:	4013      	ands	r3, r2
 80009ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d100      	bne.n	80009d8 <HAL_GPIO_Init+0x28>
 80009d6:	e140      	b.n	8000c5a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d003      	beq.n	80009e8 <HAL_GPIO_Init+0x38>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b12      	cmp	r3, #18
 80009e6:	d123      	bne.n	8000a30 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	08da      	lsrs	r2, r3, #3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3208      	adds	r2, #8
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	58d3      	ldr	r3, [r2, r3]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2207      	movs	r2, #7
 80009fa:	4013      	ands	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	220f      	movs	r2, #15
 8000a00:	409a      	lsls	r2, r3
 8000a02:	0013      	movs	r3, r2
 8000a04:	43da      	mvns	r2, r3
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	691a      	ldr	r2, [r3, #16]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	2107      	movs	r1, #7
 8000a14:	400b      	ands	r3, r1
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	409a      	lsls	r2, r3
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	6939      	ldr	r1, [r7, #16]
 8000a2e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	0013      	movs	r3, r2
 8000a40:	43da      	mvns	r2, r3
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	409a      	lsls	r2, r3
 8000a56:	0013      	movs	r3, r2
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d00b      	beq.n	8000a84 <HAL_GPIO_Init+0xd4>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d007      	beq.n	8000a84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a78:	2b11      	cmp	r3, #17
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b12      	cmp	r3, #18
 8000a82:	d130      	bne.n	8000ae6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	409a      	lsls	r2, r3
 8000a92:	0013      	movs	r3, r2
 8000a94:	43da      	mvns	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aba:	2201      	movs	r2, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	0013      	movs	r3, r2
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
 8000ad8:	0013      	movs	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	409a      	lsls	r2, r3
 8000af4:	0013      	movs	r3, r2
 8000af6:	43da      	mvns	r2, r3
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	055b      	lsls	r3, r3, #21
 8000b1e:	4013      	ands	r3, r2
 8000b20:	d100      	bne.n	8000b24 <HAL_GPIO_Init+0x174>
 8000b22:	e09a      	b.n	8000c5a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <HAL_GPIO_Init+0x2c8>)
 8000b26:	699a      	ldr	r2, [r3, #24]
 8000b28:	4b53      	ldr	r3, [pc, #332]	; (8000c78 <HAL_GPIO_Init+0x2c8>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	619a      	str	r2, [r3, #24]
 8000b30:	4b51      	ldr	r3, [pc, #324]	; (8000c78 <HAL_GPIO_Init+0x2c8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	2201      	movs	r2, #1
 8000b36:	4013      	ands	r3, r2
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b3c:	4a4f      	ldr	r2, [pc, #316]	; (8000c7c <HAL_GPIO_Init+0x2cc>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	3302      	adds	r3, #2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	589b      	ldr	r3, [r3, r2]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	4013      	ands	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	220f      	movs	r2, #15
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	2390      	movs	r3, #144	; 0x90
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d013      	beq.n	8000b92 <HAL_GPIO_Init+0x1e2>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a44      	ldr	r2, [pc, #272]	; (8000c80 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d00d      	beq.n	8000b8e <HAL_GPIO_Init+0x1de>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a43      	ldr	r2, [pc, #268]	; (8000c84 <HAL_GPIO_Init+0x2d4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d007      	beq.n	8000b8a <HAL_GPIO_Init+0x1da>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <HAL_GPIO_Init+0x2d8>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_GPIO_Init+0x1d6>
 8000b82:	2303      	movs	r3, #3
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x1e4>
 8000b86:	2305      	movs	r3, #5
 8000b88:	e004      	b.n	8000b94 <HAL_GPIO_Init+0x1e4>
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	e002      	b.n	8000b94 <HAL_GPIO_Init+0x1e4>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <HAL_GPIO_Init+0x1e4>
 8000b92:	2300      	movs	r3, #0
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	2103      	movs	r1, #3
 8000b98:	400a      	ands	r2, r1
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	4093      	lsls	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ba4:	4935      	ldr	r1, [pc, #212]	; (8000c7c <HAL_GPIO_Init+0x2cc>)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43da      	mvns	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	029b      	lsls	r3, r3, #10
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	035b      	lsls	r3, r3, #13
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	039b      	lsls	r3, r3, #14
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_GPIO_Init+0x2dc>)
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	40da      	lsrs	r2, r3
 8000c68:	1e13      	subs	r3, r2, #0
 8000c6a:	d000      	beq.n	8000c6e <HAL_GPIO_Init+0x2be>
 8000c6c:	e6a8      	b.n	80009c0 <HAL_GPIO_Init+0x10>
  } 
}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b006      	add	sp, #24
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000c00 	.word	0x48000c00
 8000c8c:	40010400 	.word	0x40010400

08000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	0008      	movs	r0, r1
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	1cbb      	adds	r3, r7, #2
 8000c9e:	1c02      	adds	r2, r0, #0
 8000ca0:	801a      	strh	r2, [r3, #0]
 8000ca2:	1c7b      	adds	r3, r7, #1
 8000ca4:	1c0a      	adds	r2, r1, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca8:	1c7b      	adds	r3, r7, #1
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d004      	beq.n	8000cba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cb0:	1cbb      	adds	r3, r7, #2
 8000cb2:	881a      	ldrh	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb8:	e003      	b.n	8000cc2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cba:	1cbb      	adds	r3, r7, #2
 8000cbc:	881a      	ldrh	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e303      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d100      	bne.n	8000cea <HAL_RCC_OscConfig+0x1e>
 8000ce8:	e08d      	b.n	8000e06 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cea:	4bc4      	ldr	r3, [pc, #784]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	220c      	movs	r2, #12
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d00e      	beq.n	8000d14 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf6:	4bc1      	ldr	r3, [pc, #772]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b08      	cmp	r3, #8
 8000d00:	d116      	bne.n	8000d30 <HAL_RCC_OscConfig+0x64>
 8000d02:	4bbe      	ldr	r3, [pc, #760]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	025b      	lsls	r3, r3, #9
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	025b      	lsls	r3, r3, #9
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d10d      	bne.n	8000d30 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d14:	4bb9      	ldr	r3, [pc, #740]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	029b      	lsls	r3, r3, #10
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <HAL_RCC_OscConfig+0x56>
 8000d20:	e070      	b.n	8000e04 <HAL_RCC_OscConfig+0x138>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d000      	beq.n	8000d2c <HAL_RCC_OscConfig+0x60>
 8000d2a:	e06b      	b.n	8000e04 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e2da      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d107      	bne.n	8000d48 <HAL_RCC_OscConfig+0x7c>
 8000d38:	4bb0      	ldr	r3, [pc, #704]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4baf      	ldr	r3, [pc, #700]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e02f      	b.n	8000da8 <HAL_RCC_OscConfig+0xdc>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10c      	bne.n	8000d6a <HAL_RCC_OscConfig+0x9e>
 8000d50:	4baa      	ldr	r3, [pc, #680]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4ba9      	ldr	r3, [pc, #676]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d56:	49aa      	ldr	r1, [pc, #680]	; (8001000 <HAL_RCC_OscConfig+0x334>)
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	4ba7      	ldr	r3, [pc, #668]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4ba6      	ldr	r3, [pc, #664]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d62:	49a8      	ldr	r1, [pc, #672]	; (8001004 <HAL_RCC_OscConfig+0x338>)
 8000d64:	400a      	ands	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	e01e      	b.n	8000da8 <HAL_RCC_OscConfig+0xdc>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d10e      	bne.n	8000d90 <HAL_RCC_OscConfig+0xc4>
 8000d72:	4ba2      	ldr	r3, [pc, #648]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4ba1      	ldr	r3, [pc, #644]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	02c9      	lsls	r1, r1, #11
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	4b9e      	ldr	r3, [pc, #632]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b9d      	ldr	r3, [pc, #628]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	0249      	lsls	r1, r1, #9
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xdc>
 8000d90:	4b9a      	ldr	r3, [pc, #616]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b99      	ldr	r3, [pc, #612]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d96:	499a      	ldr	r1, [pc, #616]	; (8001000 <HAL_RCC_OscConfig+0x334>)
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	4b97      	ldr	r3, [pc, #604]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b96      	ldr	r3, [pc, #600]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000da2:	4998      	ldr	r1, [pc, #608]	; (8001004 <HAL_RCC_OscConfig+0x338>)
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d014      	beq.n	8000dda <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fd1e 	bl	80007f0 <HAL_GetTick>
 8000db4:	0003      	movs	r3, r0
 8000db6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dba:	f7ff fd19 	bl	80007f0 <HAL_GetTick>
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b64      	cmp	r3, #100	; 0x64
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e28c      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dcc:	4b8b      	ldr	r3, [pc, #556]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	029b      	lsls	r3, r3, #10
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d0f0      	beq.n	8000dba <HAL_RCC_OscConfig+0xee>
 8000dd8:	e015      	b.n	8000e06 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fd09 	bl	80007f0 <HAL_GetTick>
 8000dde:	0003      	movs	r3, r0
 8000de0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fd04 	bl	80007f0 <HAL_GetTick>
 8000de8:	0002      	movs	r2, r0
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	; 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e277      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	4b81      	ldr	r3, [pc, #516]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	029b      	lsls	r3, r3, #10
 8000dfe:	4013      	ands	r3, r2
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x118>
 8000e02:	e000      	b.n	8000e06 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d100      	bne.n	8000e12 <HAL_RCC_OscConfig+0x146>
 8000e10:	e069      	b.n	8000ee6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e12:	4b7a      	ldr	r3, [pc, #488]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	220c      	movs	r2, #12
 8000e18:	4013      	ands	r3, r2
 8000e1a:	d00b      	beq.n	8000e34 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e1c:	4b77      	ldr	r3, [pc, #476]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	220c      	movs	r2, #12
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d11c      	bne.n	8000e62 <HAL_RCC_OscConfig+0x196>
 8000e28:	4b74      	ldr	r3, [pc, #464]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	025b      	lsls	r3, r3, #9
 8000e30:	4013      	ands	r3, r2
 8000e32:	d116      	bne.n	8000e62 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e34:	4b71      	ldr	r3, [pc, #452]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d005      	beq.n	8000e4a <HAL_RCC_OscConfig+0x17e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e24d      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4a:	4b6c      	ldr	r3, [pc, #432]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	22f8      	movs	r2, #248	; 0xf8
 8000e50:	4393      	bics	r3, r2
 8000e52:	0019      	movs	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	00da      	lsls	r2, r3, #3
 8000e5a:	4b68      	ldr	r3, [pc, #416]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e60:	e041      	b.n	8000ee6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d024      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e6a:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff fcbb 	bl	80007f0 <HAL_GetTick>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e80:	f7ff fcb6 	bl	80007f0 <HAL_GetTick>
 8000e84:	0002      	movs	r2, r0
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e229      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e92:	4b5a      	ldr	r3, [pc, #360]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2202      	movs	r2, #2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d0f1      	beq.n	8000e80 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9c:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	22f8      	movs	r2, #248	; 0xf8
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	00da      	lsls	r2, r3, #3
 8000eac:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e018      	b.n	8000ee6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb4:	4b51      	ldr	r3, [pc, #324]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000eba:	2101      	movs	r1, #1
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc96 	bl	80007f0 <HAL_GetTick>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eca:	f7ff fc91 	bl	80007f0 <HAL_GetTick>
 8000ece:	0002      	movs	r2, r0
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e204      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000edc:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d1f1      	bne.n	8000eca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2208      	movs	r2, #8
 8000eec:	4013      	ands	r3, r2
 8000eee:	d036      	beq.n	8000f5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d019      	beq.n	8000f2c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ef8:	4b40      	ldr	r3, [pc, #256]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efc:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	430a      	orrs	r2, r1
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc74 	bl	80007f0 <HAL_GetTick>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fc6f 	bl	80007f0 <HAL_GetTick>
 8000f12:	0002      	movs	r2, r0
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e1e2      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f20:	4b36      	ldr	r3, [pc, #216]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	2202      	movs	r2, #2
 8000f26:	4013      	ands	r3, r2
 8000f28:	d0f1      	beq.n	8000f0e <HAL_RCC_OscConfig+0x242>
 8000f2a:	e018      	b.n	8000f5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f30:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	438a      	bics	r2, r1
 8000f36:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fc5a 	bl	80007f0 <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f42:	f7ff fc55 	bl	80007f0 <HAL_GetTick>
 8000f46:	0002      	movs	r2, r0
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e1c8      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1f1      	bne.n	8000f42 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2204      	movs	r2, #4
 8000f64:	4013      	ands	r3, r2
 8000f66:	d100      	bne.n	8000f6a <HAL_RCC_OscConfig+0x29e>
 8000f68:	e0b6      	b.n	80010d8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f6a:	231f      	movs	r3, #31
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f74:	69da      	ldr	r2, [r3, #28]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	055b      	lsls	r3, r3, #21
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d111      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f84:	2180      	movs	r1, #128	; 0x80
 8000f86:	0549      	lsls	r1, r1, #21
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	61da      	str	r2, [r3, #28]
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000f8e:	69da      	ldr	r2, [r3, #28]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	055b      	lsls	r3, r3, #21
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f9a:	231f      	movs	r3, #31
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_RCC_OscConfig+0x33c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4013      	ands	r3, r2
 8000fac:	d11a      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_RCC_OscConfig+0x33c>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_RCC_OscConfig+0x33c>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0049      	lsls	r1, r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fc18 	bl	80007f0 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fc13 	bl	80007f0 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e186      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_RCC_OscConfig+0x33c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d10f      	bne.n	800100c <HAL_RCC_OscConfig+0x340>
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000fee:	6a1a      	ldr	r2, [r3, #32]
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <HAL_RCC_OscConfig+0x330>)
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	621a      	str	r2, [r3, #32]
 8000ff8:	e036      	b.n	8001068 <HAL_RCC_OscConfig+0x39c>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40021000 	.word	0x40021000
 8001000:	fffeffff 	.word	0xfffeffff
 8001004:	fffbffff 	.word	0xfffbffff
 8001008:	40007000 	.word	0x40007000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <HAL_RCC_OscConfig+0x362>
 8001014:	4bb6      	ldr	r3, [pc, #728]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001016:	6a1a      	ldr	r2, [r3, #32]
 8001018:	4bb5      	ldr	r3, [pc, #724]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800101a:	2101      	movs	r1, #1
 800101c:	438a      	bics	r2, r1
 800101e:	621a      	str	r2, [r3, #32]
 8001020:	4bb3      	ldr	r3, [pc, #716]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001022:	6a1a      	ldr	r2, [r3, #32]
 8001024:	4bb2      	ldr	r3, [pc, #712]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001026:	2104      	movs	r1, #4
 8001028:	438a      	bics	r2, r1
 800102a:	621a      	str	r2, [r3, #32]
 800102c:	e01c      	b.n	8001068 <HAL_RCC_OscConfig+0x39c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x384>
 8001036:	4bae      	ldr	r3, [pc, #696]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	4bad      	ldr	r3, [pc, #692]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800103c:	2104      	movs	r1, #4
 800103e:	430a      	orrs	r2, r1
 8001040:	621a      	str	r2, [r3, #32]
 8001042:	4bab      	ldr	r3, [pc, #684]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	4baa      	ldr	r3, [pc, #680]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	621a      	str	r2, [r3, #32]
 800104e:	e00b      	b.n	8001068 <HAL_RCC_OscConfig+0x39c>
 8001050:	4ba7      	ldr	r3, [pc, #668]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001052:	6a1a      	ldr	r2, [r3, #32]
 8001054:	4ba6      	ldr	r3, [pc, #664]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001056:	2101      	movs	r1, #1
 8001058:	438a      	bics	r2, r1
 800105a:	621a      	str	r2, [r3, #32]
 800105c:	4ba4      	ldr	r3, [pc, #656]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800105e:	6a1a      	ldr	r2, [r3, #32]
 8001060:	4ba3      	ldr	r3, [pc, #652]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001062:	2104      	movs	r1, #4
 8001064:	438a      	bics	r2, r1
 8001066:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d014      	beq.n	800109a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001070:	f7ff fbbe 	bl	80007f0 <HAL_GetTick>
 8001074:	0003      	movs	r3, r0
 8001076:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001078:	e009      	b.n	800108e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff fbb9 	bl	80007f0 <HAL_GetTick>
 800107e:	0002      	movs	r2, r0
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	4a9b      	ldr	r2, [pc, #620]	; (80012f4 <HAL_RCC_OscConfig+0x628>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e12b      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108e:	4b98      	ldr	r3, [pc, #608]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x3ae>
 8001098:	e013      	b.n	80010c2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fba9 	bl	80007f0 <HAL_GetTick>
 800109e:	0003      	movs	r3, r0
 80010a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a2:	e009      	b.n	80010b8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a4:	f7ff fba4 	bl	80007f0 <HAL_GetTick>
 80010a8:	0002      	movs	r2, r0
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	4a91      	ldr	r2, [pc, #580]	; (80012f4 <HAL_RCC_OscConfig+0x628>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e116      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b8:	4b8d      	ldr	r3, [pc, #564]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	2202      	movs	r2, #2
 80010be:	4013      	ands	r3, r2
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010c2:	231f      	movs	r3, #31
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d105      	bne.n	80010d8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010cc:	4b88      	ldr	r3, [pc, #544]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80010ce:	69da      	ldr	r2, [r3, #28]
 80010d0:	4b87      	ldr	r3, [pc, #540]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80010d2:	4989      	ldr	r1, [pc, #548]	; (80012f8 <HAL_RCC_OscConfig+0x62c>)
 80010d4:	400a      	ands	r2, r1
 80010d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2210      	movs	r2, #16
 80010de:	4013      	ands	r3, r2
 80010e0:	d063      	beq.n	80011aa <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d12a      	bne.n	8001140 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010ea:	4b81      	ldr	r3, [pc, #516]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80010ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ee:	4b80      	ldr	r3, [pc, #512]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80010f0:	2104      	movs	r1, #4
 80010f2:	430a      	orrs	r2, r1
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010f6:	4b7e      	ldr	r3, [pc, #504]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80010f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fa:	4b7d      	ldr	r3, [pc, #500]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fb75 	bl	80007f0 <HAL_GetTick>
 8001106:	0003      	movs	r3, r0
 8001108:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800110c:	f7ff fb70 	bl	80007f0 <HAL_GetTick>
 8001110:	0002      	movs	r2, r0
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e0e3      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800111e:	4b74      	ldr	r3, [pc, #464]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d0f1      	beq.n	800110c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001128:	4b71      	ldr	r3, [pc, #452]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800112a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112c:	22f8      	movs	r2, #248	; 0xf8
 800112e:	4393      	bics	r3, r2
 8001130:	0019      	movs	r1, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	00da      	lsls	r2, r3, #3
 8001138:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800113a:	430a      	orrs	r2, r1
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
 800113e:	e034      	b.n	80011aa <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	3305      	adds	r3, #5
 8001146:	d111      	bne.n	800116c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001148:	4b69      	ldr	r3, [pc, #420]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800114a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800114e:	2104      	movs	r1, #4
 8001150:	438a      	bics	r2, r1
 8001152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001158:	22f8      	movs	r2, #248	; 0xf8
 800115a:	4393      	bics	r3, r2
 800115c:	0019      	movs	r1, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	00da      	lsls	r2, r3, #3
 8001164:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001166:	430a      	orrs	r2, r1
 8001168:	635a      	str	r2, [r3, #52]	; 0x34
 800116a:	e01e      	b.n	80011aa <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800116c:	4b60      	ldr	r3, [pc, #384]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800116e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001170:	4b5f      	ldr	r3, [pc, #380]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001172:	2104      	movs	r1, #4
 8001174:	430a      	orrs	r2, r1
 8001176:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001178:	4b5d      	ldr	r3, [pc, #372]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800117a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117c:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800117e:	2101      	movs	r1, #1
 8001180:	438a      	bics	r2, r1
 8001182:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001184:	f7ff fb34 	bl	80007f0 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800118e:	f7ff fb2f 	bl	80007f0 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e0a2      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80011a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a4:	2202      	movs	r2, #2
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f1      	bne.n	800118e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x4e8>
 80011b2:	e097      	b.n	80012e4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b4:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	220c      	movs	r2, #12
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x4f6>
 80011c0:	e06b      	b.n	800129a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d14c      	bne.n	8001264 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80011d0:	494a      	ldr	r1, [pc, #296]	; (80012fc <HAL_RCC_OscConfig+0x630>)
 80011d2:	400a      	ands	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fb0b 	bl	80007f0 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e0:	f7ff fb06 	bl	80007f0 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e079      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	049b      	lsls	r3, r3, #18
 80011fa:	4013      	ands	r3, r2
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011fe:	4b3c      	ldr	r3, [pc, #240]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	220f      	movs	r2, #15
 8001204:	4393      	bics	r3, r2
 8001206:	0019      	movs	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800120e:	430a      	orrs	r2, r1
 8001210:	62da      	str	r2, [r3, #44]	; 0x2c
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a3a      	ldr	r2, [pc, #232]	; (8001300 <HAL_RCC_OscConfig+0x634>)
 8001218:	4013      	ands	r3, r2
 800121a:	0019      	movs	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	431a      	orrs	r2, r3
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001228:	430a      	orrs	r2, r1
 800122a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001232:	2180      	movs	r1, #128	; 0x80
 8001234:	0449      	lsls	r1, r1, #17
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fad9 	bl	80007f0 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001244:	f7ff fad4 	bl	80007f0 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e047      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	049b      	lsls	r3, r3, #18
 800125e:	4013      	ands	r3, r2
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x578>
 8001262:	e03f      	b.n	80012e4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800126a:	4924      	ldr	r1, [pc, #144]	; (80012fc <HAL_RCC_OscConfig+0x630>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fabe 	bl	80007f0 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fab9 	bl	80007f0 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e02c      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	049b      	lsls	r3, r3, #18
 8001294:	4013      	ands	r3, r2
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x5ae>
 8001298:	e024      	b.n	80012e4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1b      	ldr	r3, [r3, #32]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e01f      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_RCC_OscConfig+0x624>)
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	401a      	ands	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	429a      	cmp	r2, r3
 80012c0:	d10e      	bne.n	80012e0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	220f      	movs	r2, #15
 80012c6:	401a      	ands	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d107      	bne.n	80012e0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	23f0      	movs	r3, #240	; 0xf0
 80012d4:	039b      	lsls	r3, r3, #14
 80012d6:	401a      	ands	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b008      	add	sp, #32
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	40021000 	.word	0x40021000
 80012f4:	00001388 	.word	0x00001388
 80012f8:	efffffff 	.word	0xefffffff
 80012fc:	feffffff 	.word	0xfeffffff
 8001300:	ffc2ffff 	.word	0xffc2ffff

08001304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0b3      	b.n	8001480 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <HAL_RCC_ClockConfig+0x184>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d911      	bls.n	800134a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_RCC_ClockConfig+0x184>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2201      	movs	r2, #1
 800132c:	4393      	bics	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	4b55      	ldr	r3, [pc, #340]	; (8001488 <HAL_RCC_ClockConfig+0x184>)
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001338:	4b53      	ldr	r3, [pc, #332]	; (8001488 <HAL_RCC_ClockConfig+0x184>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	4013      	ands	r3, r2
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d001      	beq.n	800134a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e09a      	b.n	8001480 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2202      	movs	r2, #2
 8001350:	4013      	ands	r3, r2
 8001352:	d015      	beq.n	8001380 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2204      	movs	r2, #4
 800135a:	4013      	ands	r3, r2
 800135c:	d006      	beq.n	800136c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800135e:	4b4b      	ldr	r3, [pc, #300]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 8001364:	21e0      	movs	r1, #224	; 0xe0
 8001366:	00c9      	lsls	r1, r1, #3
 8001368:	430a      	orrs	r2, r1
 800136a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800136c:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	22f0      	movs	r2, #240	; 0xf0
 8001372:	4393      	bics	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	d040      	beq.n	800140c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	029b      	lsls	r3, r3, #10
 800139a:	4013      	ands	r3, r2
 800139c:	d114      	bne.n	80013c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e06e      	b.n	8001480 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	049b      	lsls	r3, r3, #18
 80013b2:	4013      	ands	r3, r2
 80013b4:	d108      	bne.n	80013c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e062      	b.n	8001480 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	4b34      	ldr	r3, [pc, #208]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e05b      	b.n	8001480 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4393      	bics	r3, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 80013d8:	430a      	orrs	r2, r1
 80013da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff fa08 	bl	80007f0 <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e4:	e009      	b.n	80013fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e6:	f7ff fa03 	bl	80007f0 <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_RCC_ClockConfig+0x18c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e042      	b.n	8001480 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	220c      	movs	r2, #12
 8001400:	401a      	ands	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	429a      	cmp	r2, r3
 800140a:	d1ec      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800140c:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <HAL_RCC_ClockConfig+0x184>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d211      	bcs.n	800143e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_RCC_ClockConfig+0x184>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2201      	movs	r2, #1
 8001420:	4393      	bics	r3, r2
 8001422:	0019      	movs	r1, r3
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_RCC_ClockConfig+0x184>)
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_RCC_ClockConfig+0x184>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	4013      	ands	r3, r2
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d001      	beq.n	800143e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e020      	b.n	8001480 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2204      	movs	r2, #4
 8001444:	4013      	ands	r3, r2
 8001446:	d009      	beq.n	800145c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a11      	ldr	r2, [pc, #68]	; (8001494 <HAL_RCC_ClockConfig+0x190>)
 800144e:	4013      	ands	r3, r2
 8001450:	0019      	movs	r1, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 8001458:	430a      	orrs	r2, r1
 800145a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800145c:	f000 f820 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 8001460:	0001      	movs	r1, r0
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_RCC_ClockConfig+0x188>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	220f      	movs	r2, #15
 800146a:	4013      	ands	r3, r2
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_RCC_ClockConfig+0x194>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	000a      	movs	r2, r1
 8001472:	40da      	lsrs	r2, r3
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_ClockConfig+0x198>)
 8001476:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff f973 	bl	8000764 <HAL_InitTick>
  
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40022000 	.word	0x40022000
 800148c:	40021000 	.word	0x40021000
 8001490:	00001388 	.word	0x00001388
 8001494:	fffff8ff 	.word	0xfffff8ff
 8001498:	08001d54 	.word	0x08001d54
 800149c:	20000000 	.word	0x20000000

080014a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08f      	sub	sp, #60	; 0x3c
 80014a4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014a6:	2314      	movs	r3, #20
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014ae:	c313      	stmia	r3!, {r0, r1, r4}
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4a29      	ldr	r2, [pc, #164]	; (800155c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014ba:	c313      	stmia	r3!, {r0, r1, r4}
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014dc:	220c      	movs	r2, #12
 80014de:	4013      	ands	r3, r2
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d002      	beq.n	80014ea <HAL_RCC_GetSysClockFreq+0x4a>
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d003      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x50>
 80014e8:	e02d      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014ee:	e02d      	b.n	800154c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	220f      	movs	r2, #15
 80014f6:	4013      	ands	r3, r2
 80014f8:	2214      	movs	r2, #20
 80014fa:	18ba      	adds	r2, r7, r2
 80014fc:	5cd3      	ldrb	r3, [r2, r3]
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	220f      	movs	r2, #15
 8001506:	4013      	ands	r3, r2
 8001508:	1d3a      	adds	r2, r7, #4
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800150e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	025b      	lsls	r3, r3, #9
 8001514:	4013      	ands	r3, r2
 8001516:	d009      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800151a:	4812      	ldr	r0, [pc, #72]	; (8001564 <HAL_RCC_GetSysClockFreq+0xc4>)
 800151c:	f7fe fdf4 	bl	8000108 <__udivsi3>
 8001520:	0003      	movs	r3, r0
 8001522:	001a      	movs	r2, r3
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	4353      	muls	r3, r2
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
 800152a:	e009      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800152c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800152e:	000a      	movs	r2, r1
 8001530:	0152      	lsls	r2, r2, #5
 8001532:	1a52      	subs	r2, r2, r1
 8001534:	0193      	lsls	r3, r2, #6
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	185b      	adds	r3, r3, r1
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001544:	e002      	b.n	800154c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800154a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b00f      	add	sp, #60	; 0x3c
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	08001cbc 	.word	0x08001cbc
 800155c:	08001ccc 	.word	0x08001ccc
 8001560:	40021000 	.word	0x40021000
 8001564:	007a1200 	.word	0x007a1200

08001568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_RCC_GetHCLKFreq+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	20000000 	.word	0x20000000

0800157c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001580:	f7ff fff2 	bl	8001568 <HAL_RCC_GetHCLKFreq>
 8001584:	0001      	movs	r1, r0
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	2207      	movs	r2, #7
 800158e:	4013      	ands	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	40d9      	lsrs	r1, r3
 8001596:	000b      	movs	r3, r1
}    
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08001d64 	.word	0x08001d64

080015a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e044      	b.n	8001644 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d107      	bne.n	80015d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2270      	movs	r2, #112	; 0x70
 80015c6:	2100      	movs	r1, #0
 80015c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff f821 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2224      	movs	r2, #36	; 0x24
 80015d6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2101      	movs	r1, #1
 80015e4:	438a      	bics	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 f830 	bl	8001650 <UART_SetConfig>
 80015f0:	0003      	movs	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e024      	b.n	8001644 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	0018      	movs	r0, r3
 8001606:	f000 f9a9 	bl	800195c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	490d      	ldr	r1, [pc, #52]	; (800164c <HAL_UART_Init+0xa4>)
 8001616:	400a      	ands	r2, r1
 8001618:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2108      	movs	r1, #8
 8001626:	438a      	bics	r2, r1
 8001628:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	0018      	movs	r0, r3
 800163e:	f000 fa41 	bl	8001ac4 <UART_CheckIdleState>
 8001642:	0003      	movs	r3, r0
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b002      	add	sp, #8
 800164a:	bd80      	pop	{r7, pc}
 800164c:	fffff7ff 	.word	0xfffff7ff

08001650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800165c:	2317      	movs	r3, #23
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4aad      	ldr	r2, [pc, #692]	; (8001938 <UART_SetConfig+0x2e8>)
 8001684:	4013      	ands	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4aa8      	ldr	r2, [pc, #672]	; (800193c <UART_SetConfig+0x2ec>)
 800169a:	4013      	ands	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a9f      	ldr	r2, [pc, #636]	; (8001940 <UART_SetConfig+0x2f0>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a9b      	ldr	r2, [pc, #620]	; (8001944 <UART_SetConfig+0x2f4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d125      	bne.n	8001726 <UART_SetConfig+0xd6>
 80016da:	4b9b      	ldr	r3, [pc, #620]	; (8001948 <UART_SetConfig+0x2f8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	2203      	movs	r2, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d00f      	beq.n	8001706 <UART_SetConfig+0xb6>
 80016e6:	d304      	bcc.n	80016f2 <UART_SetConfig+0xa2>
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d011      	beq.n	8001710 <UART_SetConfig+0xc0>
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d005      	beq.n	80016fc <UART_SetConfig+0xac>
 80016f0:	e013      	b.n	800171a <UART_SetConfig+0xca>
 80016f2:	231f      	movs	r3, #31
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
 80016fa:	e022      	b.n	8001742 <UART_SetConfig+0xf2>
 80016fc:	231f      	movs	r3, #31
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	2202      	movs	r2, #2
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	e01d      	b.n	8001742 <UART_SetConfig+0xf2>
 8001706:	231f      	movs	r3, #31
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	2204      	movs	r2, #4
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e018      	b.n	8001742 <UART_SetConfig+0xf2>
 8001710:	231f      	movs	r3, #31
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	2208      	movs	r2, #8
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e013      	b.n	8001742 <UART_SetConfig+0xf2>
 800171a:	231f      	movs	r3, #31
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2210      	movs	r2, #16
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	e00d      	b.n	8001742 <UART_SetConfig+0xf2>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a88      	ldr	r2, [pc, #544]	; (800194c <UART_SetConfig+0x2fc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d104      	bne.n	800173a <UART_SetConfig+0xea>
 8001730:	231f      	movs	r3, #31
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	e003      	b.n	8001742 <UART_SetConfig+0xf2>
 800173a:	231f      	movs	r3, #31
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	2210      	movs	r2, #16
 8001740:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	429a      	cmp	r2, r3
 800174c:	d000      	beq.n	8001750 <UART_SetConfig+0x100>
 800174e:	e07d      	b.n	800184c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8001750:	231f      	movs	r3, #31
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d01c      	beq.n	8001794 <UART_SetConfig+0x144>
 800175a:	dc02      	bgt.n	8001762 <UART_SetConfig+0x112>
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <UART_SetConfig+0x11c>
 8001760:	e04b      	b.n	80017fa <UART_SetConfig+0x1aa>
 8001762:	2b04      	cmp	r3, #4
 8001764:	d025      	beq.n	80017b2 <UART_SetConfig+0x162>
 8001766:	2b08      	cmp	r3, #8
 8001768:	d037      	beq.n	80017da <UART_SetConfig+0x18a>
 800176a:	e046      	b.n	80017fa <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800176c:	f7ff ff06 	bl	800157c <HAL_RCC_GetPCLK1Freq>
 8001770:	0003      	movs	r3, r0
 8001772:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	005a      	lsls	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	18d2      	adds	r2, r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	0019      	movs	r1, r3
 8001786:	0010      	movs	r0, r2
 8001788:	f7fe fcbe 	bl	8000108 <__udivsi3>
 800178c:	0003      	movs	r3, r0
 800178e:	b29b      	uxth	r3, r3
 8001790:	61bb      	str	r3, [r7, #24]
        break;
 8001792:	e037      	b.n	8001804 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	085b      	lsrs	r3, r3, #1
 800179a:	4a6d      	ldr	r2, [pc, #436]	; (8001950 <UART_SetConfig+0x300>)
 800179c:	189a      	adds	r2, r3, r2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	0019      	movs	r1, r3
 80017a4:	0010      	movs	r0, r2
 80017a6:	f7fe fcaf 	bl	8000108 <__udivsi3>
 80017aa:	0003      	movs	r3, r0
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	61bb      	str	r3, [r7, #24]
        break;
 80017b0:	e028      	b.n	8001804 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017b2:	f7ff fe75 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 80017b6:	0003      	movs	r3, r0
 80017b8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	005a      	lsls	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	18d2      	adds	r2, r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	0019      	movs	r1, r3
 80017cc:	0010      	movs	r0, r2
 80017ce:	f7fe fc9b 	bl	8000108 <__udivsi3>
 80017d2:	0003      	movs	r3, r0
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	61bb      	str	r3, [r7, #24]
        break;
 80017d8:	e014      	b.n	8001804 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	0252      	lsls	r2, r2, #9
 80017e4:	189a      	adds	r2, r3, r2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	0019      	movs	r1, r3
 80017ec:	0010      	movs	r0, r2
 80017ee:	f7fe fc8b 	bl	8000108 <__udivsi3>
 80017f2:	0003      	movs	r3, r0
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	61bb      	str	r3, [r7, #24]
        break;
 80017f8:	e004      	b.n	8001804 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80017fa:	2317      	movs	r3, #23
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
        break;
 8001802:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	d91b      	bls.n	8001842 <UART_SetConfig+0x1f2>
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4a51      	ldr	r2, [pc, #324]	; (8001954 <UART_SetConfig+0x304>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d817      	bhi.n	8001842 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	b29a      	uxth	r2, r3
 8001816:	200a      	movs	r0, #10
 8001818:	183b      	adds	r3, r7, r0
 800181a:	210f      	movs	r1, #15
 800181c:	438a      	bics	r2, r1
 800181e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	b29b      	uxth	r3, r3
 8001826:	2207      	movs	r2, #7
 8001828:	4013      	ands	r3, r2
 800182a:	b299      	uxth	r1, r3
 800182c:	183b      	adds	r3, r7, r0
 800182e:	183a      	adds	r2, r7, r0
 8001830:	8812      	ldrh	r2, [r2, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	183a      	adds	r2, r7, r0
 800183c:	8812      	ldrh	r2, [r2, #0]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	e06c      	b.n	800191c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8001842:	2317      	movs	r3, #23
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e067      	b.n	800191c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 800184c:	231f      	movs	r3, #31
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d01b      	beq.n	800188e <UART_SetConfig+0x23e>
 8001856:	dc02      	bgt.n	800185e <UART_SetConfig+0x20e>
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <UART_SetConfig+0x218>
 800185c:	e049      	b.n	80018f2 <UART_SetConfig+0x2a2>
 800185e:	2b04      	cmp	r3, #4
 8001860:	d024      	beq.n	80018ac <UART_SetConfig+0x25c>
 8001862:	2b08      	cmp	r3, #8
 8001864:	d035      	beq.n	80018d2 <UART_SetConfig+0x282>
 8001866:	e044      	b.n	80018f2 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001868:	f7ff fe88 	bl	800157c <HAL_RCC_GetPCLK1Freq>
 800186c:	0003      	movs	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	085a      	lsrs	r2, r3, #1
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	18d2      	adds	r2, r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	0019      	movs	r1, r3
 8001880:	0010      	movs	r0, r2
 8001882:	f7fe fc41 	bl	8000108 <__udivsi3>
 8001886:	0003      	movs	r3, r0
 8001888:	b29b      	uxth	r3, r3
 800188a:	61bb      	str	r3, [r7, #24]
        break;
 800188c:	e036      	b.n	80018fc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	4a30      	ldr	r2, [pc, #192]	; (8001958 <UART_SetConfig+0x308>)
 8001896:	189a      	adds	r2, r3, r2
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	0019      	movs	r1, r3
 800189e:	0010      	movs	r0, r2
 80018a0:	f7fe fc32 	bl	8000108 <__udivsi3>
 80018a4:	0003      	movs	r3, r0
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	61bb      	str	r3, [r7, #24]
        break;
 80018aa:	e027      	b.n	80018fc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80018ac:	f7ff fdf8 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 80018b0:	0003      	movs	r3, r0
 80018b2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	085a      	lsrs	r2, r3, #1
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	18d2      	adds	r2, r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	0019      	movs	r1, r3
 80018c4:	0010      	movs	r0, r2
 80018c6:	f7fe fc1f 	bl	8000108 <__udivsi3>
 80018ca:	0003      	movs	r3, r0
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	61bb      	str	r3, [r7, #24]
        break;
 80018d0:	e014      	b.n	80018fc <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	0212      	lsls	r2, r2, #8
 80018dc:	189a      	adds	r2, r3, r2
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0019      	movs	r1, r3
 80018e4:	0010      	movs	r0, r2
 80018e6:	f7fe fc0f 	bl	8000108 <__udivsi3>
 80018ea:	0003      	movs	r3, r0
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	61bb      	str	r3, [r7, #24]
        break;
 80018f0:	e004      	b.n	80018fc <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80018f2:	2317      	movs	r3, #23
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
        break;
 80018fa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	d908      	bls.n	8001914 <UART_SetConfig+0x2c4>
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4a13      	ldr	r2, [pc, #76]	; (8001954 <UART_SetConfig+0x304>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d804      	bhi.n	8001914 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	e003      	b.n	800191c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8001914:	2317      	movs	r3, #23
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8001928:	2317      	movs	r3, #23
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	781b      	ldrb	r3, [r3, #0]
}
 800192e:	0018      	movs	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	b008      	add	sp, #32
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	ffff69f3 	.word	0xffff69f3
 800193c:	ffffcfff 	.word	0xffffcfff
 8001940:	fffff4ff 	.word	0xfffff4ff
 8001944:	40013800 	.word	0x40013800
 8001948:	40021000 	.word	0x40021000
 800194c:	40004400 	.word	0x40004400
 8001950:	00f42400 	.word	0x00f42400
 8001954:	0000ffff 	.word	0x0000ffff
 8001958:	007a1200 	.word	0x007a1200

0800195c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	d00b      	beq.n	8001986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <UART_AdvFeatureConfig+0x144>)
 8001976:	4013      	ands	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2202      	movs	r2, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d00b      	beq.n	80019a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <UART_AdvFeatureConfig+0x148>)
 8001998:	4013      	ands	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2204      	movs	r2, #4
 80019ae:	4013      	ands	r3, r2
 80019b0:	d00b      	beq.n	80019ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <UART_AdvFeatureConfig+0x14c>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	2208      	movs	r2, #8
 80019d0:	4013      	ands	r3, r2
 80019d2:	d00b      	beq.n	80019ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a34      	ldr	r2, [pc, #208]	; (8001aac <UART_AdvFeatureConfig+0x150>)
 80019dc:	4013      	ands	r3, r2
 80019de:	0019      	movs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	2210      	movs	r2, #16
 80019f2:	4013      	ands	r3, r2
 80019f4:	d00b      	beq.n	8001a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <UART_AdvFeatureConfig+0x154>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2220      	movs	r2, #32
 8001a14:	4013      	ands	r3, r2
 8001a16:	d00b      	beq.n	8001a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <UART_AdvFeatureConfig+0x158>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	4013      	ands	r3, r2
 8001a38:	d01d      	beq.n	8001a76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <UART_AdvFeatureConfig+0x15c>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	035b      	lsls	r3, r3, #13
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d10b      	bne.n	8001a76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <UART_AdvFeatureConfig+0x160>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d00b      	beq.n	8001a98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <UART_AdvFeatureConfig+0x164>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]
  }
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	fffdffff 	.word	0xfffdffff
 8001aa4:	fffeffff 	.word	0xfffeffff
 8001aa8:	fffbffff 	.word	0xfffbffff
 8001aac:	ffff7fff 	.word	0xffff7fff
 8001ab0:	ffffefff 	.word	0xffffefff
 8001ab4:	ffffdfff 	.word	0xffffdfff
 8001ab8:	ffefffff 	.word	0xffefffff
 8001abc:	ff9fffff 	.word	0xff9fffff
 8001ac0:	fff7ffff 	.word	0xfff7ffff

08001ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001ad2:	f7fe fe8d 	bl	80007f0 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d10d      	bne.n	8001b04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	0399      	lsls	r1, r3, #14
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <UART_CheckIdleState+0x88>)
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	0013      	movs	r3, r2
 8001af6:	2200      	movs	r2, #0
 8001af8:	f000 f82a 	bl	8001b50 <UART_WaitOnFlagUntilTimeout>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e01f      	b.n	8001b44 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d10d      	bne.n	8001b2e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	03d9      	lsls	r1, r3, #15
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <UART_CheckIdleState+0x88>)
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	0013      	movs	r3, r2
 8001b20:	2200      	movs	r2, #0
 8001b22:	f000 f815 	bl	8001b50 <UART_WaitOnFlagUntilTimeout>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e00a      	b.n	8001b44 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2220      	movs	r2, #32
 8001b32:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2220      	movs	r2, #32
 8001b38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2270      	movs	r2, #112	; 0x70
 8001b3e:	2100      	movs	r1, #0
 8001b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	01ffffff 	.word	0x01ffffff

08001b50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b60:	e05d      	b.n	8001c1e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	3301      	adds	r3, #1
 8001b66:	d05a      	beq.n	8001c1e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b68:	f7fe fe42 	bl	80007f0 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d302      	bcc.n	8001b7e <UART_WaitOnFlagUntilTimeout+0x2e>
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d11b      	bne.n	8001bb6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	492f      	ldr	r1, [pc, #188]	; (8001c48 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	438a      	bics	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2270      	movs	r2, #112	; 0x70
 8001bae:	2100      	movs	r1, #0
 8001bb0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e043      	b.n	8001c3e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d02d      	beq.n	8001c1e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	69da      	ldr	r2, [r3, #28]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	401a      	ands	r2, r3
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d123      	bne.n	8001c1e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4917      	ldr	r1, [pc, #92]	; (8001c48 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2270      	movs	r2, #112	; 0x70
 8001c16:	2100      	movs	r1, #0
 8001c18:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e00f      	b.n	8001c3e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	4013      	ands	r3, r2
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	425a      	negs	r2, r3
 8001c2e:	4153      	adcs	r3, r2
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	001a      	movs	r2, r3
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d092      	beq.n	8001b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b004      	add	sp, #16
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	fffffe5f 	.word	0xfffffe5f

08001c4c <__libc_init_array>:
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	2600      	movs	r6, #0
 8001c50:	4d0c      	ldr	r5, [pc, #48]	; (8001c84 <__libc_init_array+0x38>)
 8001c52:	4c0d      	ldr	r4, [pc, #52]	; (8001c88 <__libc_init_array+0x3c>)
 8001c54:	1b64      	subs	r4, r4, r5
 8001c56:	10a4      	asrs	r4, r4, #2
 8001c58:	42a6      	cmp	r6, r4
 8001c5a:	d109      	bne.n	8001c70 <__libc_init_array+0x24>
 8001c5c:	2600      	movs	r6, #0
 8001c5e:	f000 f821 	bl	8001ca4 <_init>
 8001c62:	4d0a      	ldr	r5, [pc, #40]	; (8001c8c <__libc_init_array+0x40>)
 8001c64:	4c0a      	ldr	r4, [pc, #40]	; (8001c90 <__libc_init_array+0x44>)
 8001c66:	1b64      	subs	r4, r4, r5
 8001c68:	10a4      	asrs	r4, r4, #2
 8001c6a:	42a6      	cmp	r6, r4
 8001c6c:	d105      	bne.n	8001c7a <__libc_init_array+0x2e>
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}
 8001c70:	00b3      	lsls	r3, r6, #2
 8001c72:	58eb      	ldr	r3, [r5, r3]
 8001c74:	4798      	blx	r3
 8001c76:	3601      	adds	r6, #1
 8001c78:	e7ee      	b.n	8001c58 <__libc_init_array+0xc>
 8001c7a:	00b3      	lsls	r3, r6, #2
 8001c7c:	58eb      	ldr	r3, [r5, r3]
 8001c7e:	4798      	blx	r3
 8001c80:	3601      	adds	r6, #1
 8001c82:	e7f2      	b.n	8001c6a <__libc_init_array+0x1e>
 8001c84:	08001d6c 	.word	0x08001d6c
 8001c88:	08001d6c 	.word	0x08001d6c
 8001c8c:	08001d6c 	.word	0x08001d6c
 8001c90:	08001d70 	.word	0x08001d70

08001c94 <memset>:
 8001c94:	0003      	movs	r3, r0
 8001c96:	1812      	adds	r2, r2, r0
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <memset+0xa>
 8001c9c:	4770      	bx	lr
 8001c9e:	7019      	strb	r1, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	e7f9      	b.n	8001c98 <memset+0x4>

08001ca4 <_init>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001caa:	bc08      	pop	{r3}
 8001cac:	469e      	mov	lr, r3
 8001cae:	4770      	bx	lr

08001cb0 <_fini>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr
