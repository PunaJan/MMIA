
cv05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003334  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d4  080034d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034d4  080034d4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034d4  080034d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d4  080034d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000070  0800354c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800354c  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007529  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016fc  00000000  00000000  000275c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00028cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000618  00000000  00000000  000293a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d16b  00000000  00000000  000299b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065b7  00000000  00000000  00036b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00045c6b  00000000  00000000  0003d0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00082d45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc4  00000000  00000000  00082dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033dc 	.word	0x080033dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080033dc 	.word	0x080033dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_write>:
static uint8_t uart_rx_buf[RX_BUFFER_LEN];
static volatile uint16_t uart_rx_read_ptr = 0;
static uint16_t time;

int _write(int file, char const *buf, int n)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
 HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	b29a      	uxth	r2, r3
 8000230:	2301      	movs	r3, #1
 8000232:	425b      	negs	r3, r3
 8000234:	68b9      	ldr	r1, [r7, #8]
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <_write+0x28>)
 8000238:	f001 fc7a 	bl	8001b30 <HAL_UART_Transmit>
 return n;
 800023c:	687b      	ldr	r3, [r7, #4]
}
 800023e:	0018      	movs	r0, r3
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	20000228 	.word	0x20000228

0800024c <uart_process_command>:


static void uart_process_command(char *cmd)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	printf("prijato: '%s'\n", cmd);
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4b04      	ldr	r3, [pc, #16]	; (8000268 <uart_process_command+0x1c>)
 8000258:	0011      	movs	r1, r2
 800025a:	0018      	movs	r0, r3
 800025c:	f002 f9a6 	bl	80025ac <iprintf>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
			printf("OK\n");
		}
	}
	*/
}
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	b002      	add	sp, #8
 8000266:	bd80      	pop	{r7, pc}
 8000268:	080033f4 	.word	0x080033f4

0800026c <uart_byte_available>:


static void uart_byte_available(uint8_t c)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	0002      	movs	r2, r0
 8000274:	1dfb      	adds	r3, r7, #7
 8000276:	701a      	strb	r2, [r3, #0]
	if (c > 32 || c < 126)
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b20      	cmp	r3, #32
 800027e:	d803      	bhi.n	8000288 <uart_byte_available+0x1c>
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b7d      	cmp	r3, #125	; 0x7d
 8000286:	d83f      	bhi.n	8000308 <uart_byte_available+0x9c>
	{
		static uint16_t cnt;

		static char data[CMD_BUFFER_LEN];
		if (cnt < CMD_BUFFER_LEN) data[cnt++] = c;
 8000288:	4b21      	ldr	r3, [pc, #132]	; (8000310 <uart_byte_available+0xa4>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	2bff      	cmp	r3, #255	; 0xff
 800028e:	d80a      	bhi.n	80002a6 <uart_byte_available+0x3a>
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <uart_byte_available+0xa4>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	b291      	uxth	r1, r2
 8000298:	4a1d      	ldr	r2, [pc, #116]	; (8000310 <uart_byte_available+0xa4>)
 800029a:	8011      	strh	r1, [r2, #0]
 800029c:	0019      	movs	r1, r3
 800029e:	4b1d      	ldr	r3, [pc, #116]	; (8000314 <uart_byte_available+0xa8>)
 80002a0:	1dfa      	adds	r2, r7, #7
 80002a2:	7812      	ldrb	r2, [r2, #0]
 80002a4:	545a      	strb	r2, [r3, r1]
		if (c == '\n' || c == '\r') {
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b0a      	cmp	r3, #10
 80002ac:	d003      	beq.n	80002b6 <uart_byte_available+0x4a>
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b0d      	cmp	r3, #13
 80002b4:	d10c      	bne.n	80002d0 <uart_byte_available+0x64>
			data[cnt - 1] = '\0';
 80002b6:	4b16      	ldr	r3, [pc, #88]	; (8000310 <uart_byte_available+0xa4>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <uart_byte_available+0xa8>)
 80002be:	2100      	movs	r1, #0
 80002c0:	54d1      	strb	r1, [r2, r3]
			uart_process_command(data);
 80002c2:	4b14      	ldr	r3, [pc, #80]	; (8000314 <uart_byte_available+0xa8>)
 80002c4:	0018      	movs	r0, r3
 80002c6:	f7ff ffc1 	bl	800024c <uart_process_command>
			cnt = 0;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <uart_byte_available+0xa4>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_GetTick() > time + TIMEOUT)
 80002d0:	f000 fb5e 	bl	8000990 <HAL_GetTick>
 80002d4:	0002      	movs	r2, r0
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <uart_byte_available+0xac>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	21fa      	movs	r1, #250	; 0xfa
 80002dc:	00c9      	lsls	r1, r1, #3
 80002de:	468c      	mov	ip, r1
 80002e0:	4463      	add	r3, ip
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d910      	bls.n	8000308 <uart_byte_available+0x9c>
		{
			for(uint16_t i; i < CMD_BUFFER_LEN; i++)
 80002e6:	e00a      	b.n	80002fe <uart_byte_available+0x92>
			{
				data[i] = 0;
 80002e8:	200e      	movs	r0, #14
 80002ea:	183b      	adds	r3, r7, r0
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	4a09      	ldr	r2, [pc, #36]	; (8000314 <uart_byte_available+0xa8>)
 80002f0:	2100      	movs	r1, #0
 80002f2:	54d1      	strb	r1, [r2, r3]
			for(uint16_t i; i < CMD_BUFFER_LEN; i++)
 80002f4:	183b      	adds	r3, r7, r0
 80002f6:	881a      	ldrh	r2, [r3, #0]
 80002f8:	183b      	adds	r3, r7, r0
 80002fa:	3201      	adds	r2, #1
 80002fc:	801a      	strh	r2, [r3, #0]
 80002fe:	230e      	movs	r3, #14
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	2bff      	cmp	r3, #255	; 0xff
 8000306:	d9ef      	bls.n	80002e8 <uart_byte_available+0x7c>
			}
		}
	}
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b004      	add	sp, #16
 800030e:	bd80      	pop	{r7, pc}
 8000310:	200000d0 	.word	0x200000d0
 8000314:	200000d4 	.word	0x200000d4
 8000318:	200000ce 	.word	0x200000ce

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000322:	f000 fadb 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000326:	f000 f843 	bl	80003b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032a:	f000 f8d9 	bl	80004e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800032e:	f000 f8b9 	bl	80004a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000332:	f000 f887 	bl	8000444 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000336:	4919      	ldr	r1, [pc, #100]	; (800039c <main+0x80>)
 8000338:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <main+0x84>)
 800033a:	2240      	movs	r2, #64	; 0x40
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fc9f 	bl	8001c80 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000342:	e01f      	b.n	8000384 <main+0x68>
		  uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000344:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <main+0x88>)
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	b29b      	uxth	r3, r3
 800034a:	0019      	movs	r1, r3
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <main+0x80>)
 8000350:	5c52      	ldrb	r2, [r2, r1]
 8000352:	701a      	strb	r2, [r3, #0]
		  if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <main+0x88>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	b29b      	uxth	r3, r3
 800035a:	3301      	adds	r3, #1
 800035c:	b29b      	uxth	r3, r3
 800035e:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <main+0x88>)
 8000360:	1c19      	adds	r1, r3, #0
 8000362:	8011      	strh	r1, [r2, #0]
 8000364:	2b3f      	cmp	r3, #63	; 0x3f
 8000366:	d902      	bls.n	800036e <main+0x52>
 8000368:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <main+0x88>)
 800036a:	2200      	movs	r2, #0
 800036c:	801a      	strh	r2, [r3, #0]
		  {
			  uart_byte_available(b); // process every received byte with the RX state machine
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	0018      	movs	r0, r3
 8000374:	f7ff ff7a 	bl	800026c <uart_byte_available>
			  time = HAL_GetTick();
 8000378:	f000 fb0a 	bl	8000990 <HAL_GetTick>
 800037c:	0003      	movs	r3, r0
 800037e:	b29a      	uxth	r2, r3
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <main+0x8c>)
 8000382:	801a      	strh	r2, [r3, #0]
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <main+0x88>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	b29b      	uxth	r3, r3
 800038a:	0019      	movs	r1, r3
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <main+0x90>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	2240      	movs	r2, #64	; 0x40
 8000394:	1ad3      	subs	r3, r2, r3
 8000396:	4299      	cmp	r1, r3
 8000398:	d1d4      	bne.n	8000344 <main+0x28>
 800039a:	e7f3      	b.n	8000384 <main+0x68>
 800039c:	2000008c 	.word	0x2000008c
 80003a0:	20000228 	.word	0x20000228
 80003a4:	200000cc 	.word	0x200000cc
 80003a8:	200000ce 	.word	0x200000ce
 80003ac:	200001e0 	.word	0x200001e0

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b091      	sub	sp, #68	; 0x44
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	2410      	movs	r4, #16
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	0018      	movs	r0, r3
 80003bc:	2330      	movs	r3, #48	; 0x30
 80003be:	001a      	movs	r2, r3
 80003c0:	2100      	movs	r1, #0
 80003c2:	f002 f8eb 	bl	800259c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c6:	003b      	movs	r3, r7
 80003c8:	0018      	movs	r0, r3
 80003ca:	2310      	movs	r3, #16
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f002 f8e4 	bl	800259c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d4:	0021      	movs	r1, r4
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2202      	movs	r2, #2
 80003da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2201      	movs	r2, #1
 80003e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	2210      	movs	r2, #16
 80003e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2202      	movs	r2, #2
 80003ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2200      	movs	r2, #0
 80003f2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	22a0      	movs	r2, #160	; 0xa0
 80003f8:	0392      	lsls	r2, r2, #14
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000402:	187b      	adds	r3, r7, r1
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fed1 	bl	80011ac <HAL_RCC_OscConfig>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800040e:	f000 f8f9 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	003b      	movs	r3, r7
 8000414:	2207      	movs	r2, #7
 8000416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000418:	003b      	movs	r3, r7
 800041a:	2202      	movs	r2, #2
 800041c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041e:	003b      	movs	r3, r7
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800042a:	003b      	movs	r3, r7
 800042c:	2101      	movs	r1, #1
 800042e:	0018      	movs	r0, r3
 8000430:	f001 f9d8 	bl	80017e4 <HAL_RCC_ClockConfig>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000438:	f000 f8e4 	bl	8000604 <Error_Handler>
  }
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b011      	add	sp, #68	; 0x44
 8000442:	bd90      	pop	{r4, r7, pc}

08000444 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000448:	4b14      	ldr	r3, [pc, #80]	; (800049c <MX_USART2_UART_Init+0x58>)
 800044a:	4a15      	ldr	r2, [pc, #84]	; (80004a0 <MX_USART2_UART_Init+0x5c>)
 800044c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000450:	2296      	movs	r2, #150	; 0x96
 8000452:	0212      	lsls	r2, r2, #8
 8000454:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_USART2_UART_Init+0x58>)
 800046a:	220c      	movs	r2, #12
 800046c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <MX_USART2_UART_Init+0x58>)
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fafd 	bl	8001a88 <HAL_UART_Init>
 800048e:	1e03      	subs	r3, r0, #0
 8000490:	d001      	beq.n	8000496 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000492:	f000 f8b7 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000228 	.word	0x20000228
 80004a0:	40004400 	.word	0x40004400

080004a4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_DMA_Init+0x38>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <MX_DMA_Init+0x38>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	615a      	str	r2, [r3, #20]
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_DMA_Init+0x38>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2100      	movs	r1, #0
 80004c6:	200b      	movs	r0, #11
 80004c8:	f000 fb18 	bl	8000afc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80004cc:	200b      	movs	r0, #11
 80004ce:	f000 fb2a 	bl	8000b26 <HAL_NVIC_EnableIRQ>

}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40021000 	.word	0x40021000

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b08b      	sub	sp, #44	; 0x2c
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	2414      	movs	r4, #20
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 f853 	bl	800259c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	4b3f      	ldr	r3, [pc, #252]	; (80005f4 <MX_GPIO_Init+0x114>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b3e      	ldr	r3, [pc, #248]	; (80005f4 <MX_GPIO_Init+0x114>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0309      	lsls	r1, r1, #12
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <MX_GPIO_Init+0x114>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	031b      	lsls	r3, r3, #12
 800050c:	4013      	ands	r3, r2
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000512:	4b38      	ldr	r3, [pc, #224]	; (80005f4 <MX_GPIO_Init+0x114>)
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	4b37      	ldr	r3, [pc, #220]	; (80005f4 <MX_GPIO_Init+0x114>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	03c9      	lsls	r1, r1, #15
 800051c:	430a      	orrs	r2, r1
 800051e:	615a      	str	r2, [r3, #20]
 8000520:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <MX_GPIO_Init+0x114>)
 8000522:	695a      	ldr	r2, [r3, #20]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	03db      	lsls	r3, r3, #15
 8000528:	4013      	ands	r3, r2
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <MX_GPIO_Init+0x114>)
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <MX_GPIO_Init+0x114>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0289      	lsls	r1, r1, #10
 8000538:	430a      	orrs	r2, r1
 800053a:	615a      	str	r2, [r3, #20]
 800053c:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <MX_GPIO_Init+0x114>)
 800053e:	695a      	ldr	r2, [r3, #20]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	029b      	lsls	r3, r3, #10
 8000544:	4013      	ands	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <MX_GPIO_Init+0x114>)
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <MX_GPIO_Init+0x114>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	02c9      	lsls	r1, r1, #11
 8000554:	430a      	orrs	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <MX_GPIO_Init+0x114>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	02db      	lsls	r3, r3, #11
 8000560:	4013      	ands	r3, r2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000566:	2390      	movs	r3, #144	; 0x90
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	2200      	movs	r2, #0
 800056c:	2130      	movs	r1, #48	; 0x30
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fdfe 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <MX_GPIO_Init+0x118>)
 8000576:	2200      	movs	r2, #0
 8000578:	2101      	movs	r1, #1
 800057a:	0018      	movs	r0, r3
 800057c:	f000 fdf8 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0192      	lsls	r2, r2, #6
 8000586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_GPIO_Init+0x11c>)
 800058c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000594:	193b      	adds	r3, r7, r4
 8000596:	4a1a      	ldr	r2, [pc, #104]	; (8000600 <MX_GPIO_Init+0x120>)
 8000598:	0019      	movs	r1, r3
 800059a:	0010      	movs	r0, r2
 800059c:	f000 fc78 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2201      	movs	r2, #1
 80005aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	193a      	adds	r2, r7, r4
 80005ba:	2390      	movs	r3, #144	; 0x90
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fc65 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80005c6:	0021      	movs	r1, r4
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2201      	movs	r2, #1
 80005d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <MX_GPIO_Init+0x118>)
 80005e4:	0019      	movs	r1, r3
 80005e6:	0010      	movs	r0, r2
 80005e8:	f000 fc52 	bl	8000e90 <HAL_GPIO_Init>

}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b00b      	add	sp, #44	; 0x2c
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48000400 	.word	0x48000400
 80005fc:	10210000 	.word	0x10210000
 8000600:	48000800 	.word	0x48000800

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x44>)
 8000618:	699a      	ldr	r2, [r3, #24]
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_MspInit+0x44>)
 800061c:	2101      	movs	r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x44>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	2201      	movs	r2, #1
 8000628:	4013      	ands	r3, r2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_MspInit+0x44>)
 8000630:	69da      	ldr	r2, [r3, #28]
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_MspInit+0x44>)
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	0549      	lsls	r1, r1, #21
 8000638:	430a      	orrs	r2, r1
 800063a:	61da      	str	r2, [r3, #28]
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_MspInit+0x44>)
 800063e:	69da      	ldr	r2, [r3, #28]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	055b      	lsls	r3, r3, #21
 8000644:	4013      	ands	r3, r2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	2314      	movs	r3, #20
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	0018      	movs	r0, r3
 8000666:	2314      	movs	r3, #20
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f001 ff96 	bl	800259c <memset>
  if(huart->Instance==USART2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <HAL_UART_MspInit+0xdc>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d158      	bne.n	800072c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067a:	4b2f      	ldr	r3, [pc, #188]	; (8000738 <HAL_UART_MspInit+0xe0>)
 800067c:	69da      	ldr	r2, [r3, #28]
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <HAL_UART_MspInit+0xe0>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0289      	lsls	r1, r1, #10
 8000684:	430a      	orrs	r2, r1
 8000686:	61da      	str	r2, [r3, #28]
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <HAL_UART_MspInit+0xe0>)
 800068a:	69da      	ldr	r2, [r3, #28]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	029b      	lsls	r3, r3, #10
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <HAL_UART_MspInit+0xe0>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <HAL_UART_MspInit+0xe0>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0289      	lsls	r1, r1, #10
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <HAL_UART_MspInit+0xe0>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	029b      	lsls	r3, r3, #10
 80006ac:	4013      	ands	r3, r2
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006b2:	2114      	movs	r1, #20
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2202      	movs	r2, #2
 80006be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	187a      	adds	r2, r7, r1
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fbd8 	bl	8000e90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_UART_MspInit+0xe4>)
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_UART_MspInit+0xe8>)
 80006e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_UART_MspInit+0xe4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_UART_MspInit+0xe4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_UART_MspInit+0xe4>)
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_UART_MspInit+0xe4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_UART_MspInit+0xe4>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_UART_MspInit+0xe4>)
 8000706:	2220      	movs	r2, #32
 8000708:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_UART_MspInit+0xe4>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_UART_MspInit+0xe4>)
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fa24 	bl	8000b60 <HAL_DMA_Init>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800071c:	f7ff ff72 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <HAL_UART_MspInit+0xe4>)
 8000724:	66da      	str	r2, [r3, #108]	; 0x6c
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_UART_MspInit+0xe4>)
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b00a      	add	sp, #40	; 0x28
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40004400 	.word	0x40004400
 8000738:	40021000 	.word	0x40021000
 800073c:	200001e0 	.word	0x200001e0
 8000740:	40020058 	.word	0x40020058

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <HardFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076c:	f000 f8fe 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <DMA1_Channel4_5_IRQHandler+0x14>)
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fa9c 	bl	8000cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	200001e0 	.word	0x200001e0

08000790 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e00a      	b.n	80007b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007a2:	e000      	b.n	80007a6 <_read+0x16>
 80007a4:	bf00      	nop
 80007a6:	0001      	movs	r1, r0
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf0      	blt.n	80007a2 <_read+0x12>
	}

return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	0018      	movs	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b006      	add	sp, #24
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
	return -1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	425b      	negs	r3, r3
}
 80007d6:	0018      	movs	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}

080007de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	0192      	lsls	r2, r2, #6
 80007ee:	605a      	str	r2, [r3, #4]
	return 0;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	0018      	movs	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_isatty>:

int _isatty(int file)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	return 1;
 8000802:	2301      	movs	r3, #1
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}

0800080c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	return 0;
 8000818:	2300      	movs	r3, #0
}
 800081a:	0018      	movs	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <_sbrk+0x50>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x16>
		heap_end = &end;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <_sbrk+0x50>)
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <_sbrk+0x54>)
 8000838:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <_sbrk+0x50>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <_sbrk+0x50>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	18d3      	adds	r3, r2, r3
 8000848:	466a      	mov	r2, sp
 800084a:	4293      	cmp	r3, r2
 800084c:	d907      	bls.n	800085e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800084e:	f001 fe7b 	bl	8002548 <__errno>
 8000852:	0003      	movs	r3, r0
 8000854:	220c      	movs	r2, #12
 8000856:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000858:	2301      	movs	r3, #1
 800085a:	425b      	negs	r3, r3
 800085c:	e006      	b.n	800086c <_sbrk+0x48>
	}

	heap_end += incr;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <_sbrk+0x50>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	18d2      	adds	r2, r2, r3
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <_sbrk+0x50>)
 8000868:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b004      	add	sp, #16
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001d4 	.word	0x200001d4
 8000878:	200002b0 	.word	0x200002b0

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800088e:	490e      	ldr	r1, [pc, #56]	; (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a4:	4c0b      	ldr	r4, [pc, #44]	; (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008b2:	f7ff ffe3 	bl	800087c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008b6:	f001 fe4d 	bl	8002554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fd2f 	bl	800031c <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008cc:	080034dc 	.word	0x080034dc
  ldr r2, =_sbss
 80008d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008d4:	200002b0 	.word	0x200002b0

080008d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_IRQHandler>
	...

080008dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <HAL_Init+0x24>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_Init+0x24>)
 80008e6:	2110      	movs	r1, #16
 80008e8:	430a      	orrs	r2, r1
 80008ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 f809 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f2:	f7ff fe8d 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HAL_InitTick+0x5c>)
 800090e:	681c      	ldr	r4, [r3, #0]
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <HAL_InitTick+0x60>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	0019      	movs	r1, r3
 8000916:	23fa      	movs	r3, #250	; 0xfa
 8000918:	0098      	lsls	r0, r3, #2
 800091a:	f7ff fbf5 	bl	8000108 <__udivsi3>
 800091e:	0003      	movs	r3, r0
 8000920:	0019      	movs	r1, r3
 8000922:	0020      	movs	r0, r4
 8000924:	f7ff fbf0 	bl	8000108 <__udivsi3>
 8000928:	0003      	movs	r3, r0
 800092a:	0018      	movs	r0, r3
 800092c:	f000 f90b 	bl	8000b46 <HAL_SYSTICK_Config>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	e00f      	b.n	8000958 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d80b      	bhi.n	8000956 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	2301      	movs	r3, #1
 8000942:	425b      	negs	r3, r3
 8000944:	2200      	movs	r2, #0
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f8d8 	bl	8000afc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_InitTick+0x64>)
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b003      	add	sp, #12
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_IncTick+0x1c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	001a      	movs	r2, r3
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <HAL_IncTick+0x20>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	18d2      	adds	r2, r2, r3
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <HAL_IncTick+0x20>)
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	20000008 	.word	0x20000008
 800098c:	200002a8 	.word	0x200002a8

08000990 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b02      	ldr	r3, [pc, #8]	; (80009a0 <HAL_GetTick+0x10>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	200002a8 	.word	0x200002a8

080009a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	0002      	movs	r2, r0
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b7f      	cmp	r3, #127	; 0x7f
 80009b6:	d809      	bhi.n	80009cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	001a      	movs	r2, r3
 80009be:	231f      	movs	r3, #31
 80009c0:	401a      	ands	r2, r3
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__NVIC_EnableIRQ+0x30>)
 80009c4:	2101      	movs	r1, #1
 80009c6:	4091      	lsls	r1, r2
 80009c8:	000a      	movs	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]
  }
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	e000e100 	.word	0xe000e100

080009d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	0002      	movs	r2, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b7f      	cmp	r3, #127	; 0x7f
 80009ec:	d828      	bhi.n	8000a40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ee:	4a2f      	ldr	r2, [pc, #188]	; (8000aac <__NVIC_SetPriority+0xd4>)
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	33c0      	adds	r3, #192	; 0xc0
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	589b      	ldr	r3, [r3, r2]
 80009fe:	1dfa      	adds	r2, r7, #7
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	0011      	movs	r1, r2
 8000a04:	2203      	movs	r2, #3
 8000a06:	400a      	ands	r2, r1
 8000a08:	00d2      	lsls	r2, r2, #3
 8000a0a:	21ff      	movs	r1, #255	; 0xff
 8000a0c:	4091      	lsls	r1, r2
 8000a0e:	000a      	movs	r2, r1
 8000a10:	43d2      	mvns	r2, r2
 8000a12:	401a      	ands	r2, r3
 8000a14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	019b      	lsls	r3, r3, #6
 8000a1a:	22ff      	movs	r2, #255	; 0xff
 8000a1c:	401a      	ands	r2, r3
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0018      	movs	r0, r3
 8000a24:	2303      	movs	r3, #3
 8000a26:	4003      	ands	r3, r0
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a2c:	481f      	ldr	r0, [pc, #124]	; (8000aac <__NVIC_SetPriority+0xd4>)
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b25b      	sxtb	r3, r3
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	33c0      	adds	r3, #192	; 0xc0
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a3e:	e031      	b.n	8000aa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <__NVIC_SetPriority+0xd8>)
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0019      	movs	r1, r3
 8000a48:	230f      	movs	r3, #15
 8000a4a:	400b      	ands	r3, r1
 8000a4c:	3b08      	subs	r3, #8
 8000a4e:	089b      	lsrs	r3, r3, #2
 8000a50:	3306      	adds	r3, #6
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	18d3      	adds	r3, r2, r3
 8000a56:	3304      	adds	r3, #4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1dfa      	adds	r2, r7, #7
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	0011      	movs	r1, r2
 8000a60:	2203      	movs	r2, #3
 8000a62:	400a      	ands	r2, r1
 8000a64:	00d2      	lsls	r2, r2, #3
 8000a66:	21ff      	movs	r1, #255	; 0xff
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	401a      	ands	r2, r3
 8000a70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	019b      	lsls	r3, r3, #6
 8000a76:	22ff      	movs	r2, #255	; 0xff
 8000a78:	401a      	ands	r2, r3
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2303      	movs	r3, #3
 8000a82:	4003      	ands	r3, r0
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <__NVIC_SetPriority+0xd8>)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	001c      	movs	r4, r3
 8000a90:	230f      	movs	r3, #15
 8000a92:	4023      	ands	r3, r4
 8000a94:	3b08      	subs	r3, #8
 8000a96:	089b      	lsrs	r3, r3, #2
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	3306      	adds	r3, #6
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	18c3      	adds	r3, r0, r3
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	601a      	str	r2, [r3, #0]
}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b003      	add	sp, #12
 8000aaa:	bd90      	pop	{r4, r7, pc}
 8000aac:	e000e100 	.word	0xe000e100
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <SysTick_Config+0x40>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d901      	bls.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e010      	b.n	8000aec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <SysTick_Config+0x44>)
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	3a01      	subs	r2, #1
 8000ad0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff7d 	bl	80009d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SysTick_Config+0x44>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x44>)
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	00ffffff 	.word	0x00ffffff
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	210f      	movs	r1, #15
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	1c02      	adds	r2, r0, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff ff5d 	bl	80009d8 <__NVIC_SetPriority>
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b004      	add	sp, #16
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	0002      	movs	r2, r0
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ff33 	bl	80009a4 <__NVIC_EnableIRQ>
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ffaf 	bl	8000ab4 <SysTick_Config>
 8000b56:	0003      	movs	r3, r0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e036      	b.n	8000be4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2221      	movs	r2, #33	; 0x21
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_DMA_Init+0x8c>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bb6:	68fa      	ldr	r2, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f946 	bl	8000e58 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2221      	movs	r2, #33	; 0x21
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2220      	movs	r2, #32
 8000bde:	2100      	movs	r1, #0
 8000be0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}  
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b004      	add	sp, #16
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	ffffc00f 	.word	0xffffc00f

08000bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000bfe:	2317      	movs	r3, #23
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2220      	movs	r2, #32
 8000c0a:	5c9b      	ldrb	r3, [r3, r2]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d101      	bne.n	8000c14 <HAL_DMA_Start_IT+0x24>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e04f      	b.n	8000cb4 <HAL_DMA_Start_IT+0xc4>
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2220      	movs	r2, #32
 8000c18:	2101      	movs	r1, #1
 8000c1a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2221      	movs	r2, #33	; 0x21
 8000c20:	5c9b      	ldrb	r3, [r3, r2]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d13a      	bne.n	8000c9e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2221      	movs	r2, #33	; 0x21
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2200      	movs	r2, #0
 8000c34:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	438a      	bics	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f000 f8d7 	bl	8000e00 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d008      	beq.n	8000c6c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	210e      	movs	r1, #14
 8000c66:	430a      	orrs	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e00f      	b.n	8000c8c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	210a      	movs	r1, #10
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2104      	movs	r1, #4
 8000c88:	438a      	bics	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2101      	movs	r1, #1
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	e007      	b.n	8000cae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000ca6:	2317      	movs	r3, #23
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	2202      	movs	r2, #2
 8000cac:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000cae:	2317      	movs	r3, #23
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	781b      	ldrb	r3, [r3, #0]
} 
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b006      	add	sp, #24
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	2204      	movs	r2, #4
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d024      	beq.n	8000d2e <HAL_DMA_IRQHandler+0x72>
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d020      	beq.n	8000d2e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2220      	movs	r2, #32
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d107      	bne.n	8000d08 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2104      	movs	r1, #4
 8000d04:	438a      	bics	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d10:	2104      	movs	r1, #4
 8000d12:	4091      	lsls	r1, r2
 8000d14:	000a      	movs	r2, r1
 8000d16:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d100      	bne.n	8000d22 <HAL_DMA_IRQHandler+0x66>
 8000d20:	e06a      	b.n	8000df8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	0010      	movs	r0, r2
 8000d2a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000d2c:	e064      	b.n	8000df8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	2202      	movs	r2, #2
 8000d34:	409a      	lsls	r2, r3
 8000d36:	0013      	movs	r3, r2
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d02b      	beq.n	8000d96 <HAL_DMA_IRQHandler+0xda>
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2202      	movs	r2, #2
 8000d42:	4013      	ands	r3, r2
 8000d44:	d027      	beq.n	8000d96 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	210a      	movs	r1, #10
 8000d5e:	438a      	bics	r2, r1
 8000d60:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2221      	movs	r2, #33	; 0x21
 8000d66:	2101      	movs	r1, #1
 8000d68:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d72:	2102      	movs	r1, #2
 8000d74:	4091      	lsls	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	2100      	movs	r1, #0
 8000d80:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d036      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	0010      	movs	r0, r2
 8000d92:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d94:	e030      	b.n	8000df8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	0013      	movs	r3, r2
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	4013      	ands	r3, r2
 8000da4:	d028      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x13c>
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2208      	movs	r2, #8
 8000daa:	4013      	ands	r3, r2
 8000dac:	d024      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	210e      	movs	r1, #14
 8000dba:	438a      	bics	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2221      	movs	r2, #33	; 0x21
 8000dd8:	2101      	movs	r1, #1
 8000dda:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2220      	movs	r2, #32
 8000de0:	2100      	movs	r1, #0
 8000de2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	0010      	movs	r0, r2
 8000df4:	4798      	blx	r3
    }
   }
}  
 8000df6:	e7ff      	b.n	8000df8 <HAL_DMA_IRQHandler+0x13c>
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b004      	add	sp, #16
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e16:	2101      	movs	r1, #1
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b10      	cmp	r3, #16
 8000e2c:	d108      	bne.n	8000e40 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e3e:	e007      	b.n	8000e50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	60da      	str	r2, [r3, #12]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b004      	add	sp, #16
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <DMA_CalcBaseAndBitshift+0x30>)
 8000e66:	4694      	mov	ip, r2
 8000e68:	4463      	add	r3, ip
 8000e6a:	2114      	movs	r1, #20
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff f94b 	bl	8000108 <__udivsi3>
 8000e72:	0003      	movs	r3, r0
 8000e74:	009a      	lsls	r2, r3, #2
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <DMA_CalcBaseAndBitshift+0x34>)
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	bffdfff8 	.word	0xbffdfff8
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	e14f      	b.n	8001140 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	000a      	movs	r2, r1
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d100      	bne.n	8000eb8 <HAL_GPIO_Init+0x28>
 8000eb6:	e140      	b.n	800113a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x38>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b12      	cmp	r3, #18
 8000ec6:	d123      	bne.n	8000f10 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	58d3      	ldr	r3, [r2, r3]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2207      	movs	r2, #7
 8000eda:	4013      	ands	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	220f      	movs	r2, #15
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	691a      	ldr	r2, [r3, #16]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	400b      	ands	r3, r1
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	0013      	movs	r3, r2
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	6939      	ldr	r1, [r7, #16]
 8000f0e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d00b      	beq.n	8000f64 <HAL_GPIO_Init+0xd4>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f58:	2b11      	cmp	r3, #17
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b12      	cmp	r3, #18
 8000f62:	d130      	bne.n	8000fc6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	2203      	movs	r2, #3
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	43da      	mvns	r2, r3
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	409a      	lsls	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	0013      	movs	r3, r2
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	0013      	movs	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	0013      	movs	r3, r2
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	055b      	lsls	r3, r3, #21
 8000ffe:	4013      	ands	r3, r2
 8001000:	d100      	bne.n	8001004 <HAL_GPIO_Init+0x174>
 8001002:	e09a      	b.n	800113a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b54      	ldr	r3, [pc, #336]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8001006:	699a      	ldr	r2, [r3, #24]
 8001008:	4b53      	ldr	r3, [pc, #332]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 800100a:	2101      	movs	r1, #1
 800100c:	430a      	orrs	r2, r1
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	4b51      	ldr	r3, [pc, #324]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	2201      	movs	r2, #1
 8001016:	4013      	ands	r3, r2
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101c:	4a4f      	ldr	r2, [pc, #316]	; (800115c <HAL_GPIO_Init+0x2cc>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	589b      	ldr	r3, [r3, r2]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2203      	movs	r2, #3
 800102e:	4013      	ands	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	2390      	movs	r3, #144	; 0x90
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	429a      	cmp	r2, r3
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x1e2>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a44      	ldr	r2, [pc, #272]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x1de>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a43      	ldr	r2, [pc, #268]	; (8001164 <HAL_GPIO_Init+0x2d4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x1da>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a42      	ldr	r2, [pc, #264]	; (8001168 <HAL_GPIO_Init+0x2d8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x1d6>
 8001062:	2303      	movs	r3, #3
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x1e4>
 8001066:	2305      	movs	r3, #5
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x1e4>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x1e4>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x1e4>
 8001072:	2300      	movs	r3, #0
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	2103      	movs	r1, #3
 8001078:	400a      	ands	r2, r1
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001084:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_GPIO_Init+0x2cc>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001092:	4b36      	ldr	r3, [pc, #216]	; (800116c <HAL_GPIO_Init+0x2dc>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43da      	mvns	r2, r3
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	025b      	lsls	r3, r3, #9
 80010aa:	4013      	ands	r3, r2
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_GPIO_Init+0x2dc>)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_GPIO_Init+0x2dc>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	029b      	lsls	r3, r3, #10
 80010d4:	4013      	ands	r3, r2
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_GPIO_Init+0x2dc>)
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <HAL_GPIO_Init+0x2dc>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	035b      	lsls	r3, r3, #13
 80010fe:	4013      	ands	r3, r2
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_GPIO_Init+0x2dc>)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_GPIO_Init+0x2dc>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43da      	mvns	r2, r3
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	039b      	lsls	r3, r3, #14
 8001128:	4013      	ands	r3, r2
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_GPIO_Init+0x2dc>)
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	40da      	lsrs	r2, r3
 8001148:	1e13      	subs	r3, r2, #0
 800114a:	d000      	beq.n	800114e <HAL_GPIO_Init+0x2be>
 800114c:	e6a8      	b.n	8000ea0 <HAL_GPIO_Init+0x10>
  } 
}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b006      	add	sp, #24
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	48000400 	.word	0x48000400
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	0008      	movs	r0, r1
 800117a:	0011      	movs	r1, r2
 800117c:	1cbb      	adds	r3, r7, #2
 800117e:	1c02      	adds	r2, r0, #0
 8001180:	801a      	strh	r2, [r3, #0]
 8001182:	1c7b      	adds	r3, r7, #1
 8001184:	1c0a      	adds	r2, r1, #0
 8001186:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001188:	1c7b      	adds	r3, r7, #1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001190:	1cbb      	adds	r3, r7, #2
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800119a:	1cbb      	adds	r3, r7, #2
 800119c:	881a      	ldrh	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e303      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	d100      	bne.n	80011ca <HAL_RCC_OscConfig+0x1e>
 80011c8:	e08d      	b.n	80012e6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011ca:	4bc4      	ldr	r3, [pc, #784]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	220c      	movs	r2, #12
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d00e      	beq.n	80011f4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d6:	4bc1      	ldr	r3, [pc, #772]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	220c      	movs	r2, #12
 80011dc:	4013      	ands	r3, r2
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x64>
 80011e2:	4bbe      	ldr	r3, [pc, #760]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	025b      	lsls	r3, r3, #9
 80011ea:	401a      	ands	r2, r3
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	025b      	lsls	r3, r3, #9
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d10d      	bne.n	8001210 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	4bb9      	ldr	r3, [pc, #740]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d100      	bne.n	8001202 <HAL_RCC_OscConfig+0x56>
 8001200:	e070      	b.n	80012e4 <HAL_RCC_OscConfig+0x138>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d000      	beq.n	800120c <HAL_RCC_OscConfig+0x60>
 800120a:	e06b      	b.n	80012e4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e2da      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d107      	bne.n	8001228 <HAL_RCC_OscConfig+0x7c>
 8001218:	4bb0      	ldr	r3, [pc, #704]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4baf      	ldr	r3, [pc, #700]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0249      	lsls	r1, r1, #9
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e02f      	b.n	8001288 <HAL_RCC_OscConfig+0xdc>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x9e>
 8001230:	4baa      	ldr	r3, [pc, #680]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4ba9      	ldr	r3, [pc, #676]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001236:	49aa      	ldr	r1, [pc, #680]	; (80014e0 <HAL_RCC_OscConfig+0x334>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	4ba7      	ldr	r3, [pc, #668]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4ba6      	ldr	r3, [pc, #664]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001242:	49a8      	ldr	r1, [pc, #672]	; (80014e4 <HAL_RCC_OscConfig+0x338>)
 8001244:	400a      	ands	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e01e      	b.n	8001288 <HAL_RCC_OscConfig+0xdc>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d10e      	bne.n	8001270 <HAL_RCC_OscConfig+0xc4>
 8001252:	4ba2      	ldr	r3, [pc, #648]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4ba1      	ldr	r3, [pc, #644]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	02c9      	lsls	r1, r1, #11
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	4b9e      	ldr	r3, [pc, #632]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b9d      	ldr	r3, [pc, #628]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0249      	lsls	r1, r1, #9
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xdc>
 8001270:	4b9a      	ldr	r3, [pc, #616]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b99      	ldr	r3, [pc, #612]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001276:	499a      	ldr	r1, [pc, #616]	; (80014e0 <HAL_RCC_OscConfig+0x334>)
 8001278:	400a      	ands	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	4b97      	ldr	r3, [pc, #604]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b96      	ldr	r3, [pc, #600]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001282:	4998      	ldr	r1, [pc, #608]	; (80014e4 <HAL_RCC_OscConfig+0x338>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d014      	beq.n	80012ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fb7e 	bl	8000990 <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129a:	f7ff fb79 	bl	8000990 <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b64      	cmp	r3, #100	; 0x64
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e28c      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ac:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	029b      	lsls	r3, r3, #10
 80012b4:	4013      	ands	r3, r2
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0xee>
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb69 	bl	8000990 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fb64 	bl	8000990 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e277      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b81      	ldr	r3, [pc, #516]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x118>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d100      	bne.n	80012f2 <HAL_RCC_OscConfig+0x146>
 80012f0:	e069      	b.n	80013c6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012f2:	4b7a      	ldr	r3, [pc, #488]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	220c      	movs	r2, #12
 80012f8:	4013      	ands	r3, r2
 80012fa:	d00b      	beq.n	8001314 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012fc:	4b77      	ldr	r3, [pc, #476]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	220c      	movs	r2, #12
 8001302:	4013      	ands	r3, r2
 8001304:	2b08      	cmp	r3, #8
 8001306:	d11c      	bne.n	8001342 <HAL_RCC_OscConfig+0x196>
 8001308:	4b74      	ldr	r3, [pc, #464]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	4013      	ands	r3, r2
 8001312:	d116      	bne.n	8001342 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001314:	4b71      	ldr	r3, [pc, #452]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2202      	movs	r2, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x17e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e24d      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b6c      	ldr	r3, [pc, #432]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	22f8      	movs	r2, #248	; 0xf8
 8001330:	4393      	bics	r3, r2
 8001332:	0019      	movs	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	00da      	lsls	r2, r3, #3
 800133a:	4b68      	ldr	r3, [pc, #416]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001340:	e041      	b.n	80013c6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d024      	beq.n	8001394 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b63      	ldr	r3, [pc, #396]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001350:	2101      	movs	r1, #1
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fb1b 	bl	8000990 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fb16 	bl	8000990 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e229      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d0f1      	beq.n	8001360 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b57      	ldr	r3, [pc, #348]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	22f8      	movs	r2, #248	; 0xf8
 8001382:	4393      	bics	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00da      	lsls	r2, r3, #3
 800138c:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e018      	b.n	80013c6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001394:	4b51      	ldr	r3, [pc, #324]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b50      	ldr	r3, [pc, #320]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff faf6 	bl	8000990 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff faf1 	bl	8000990 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e204      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013bc:	4b47      	ldr	r3, [pc, #284]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2202      	movs	r2, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d1f1      	bne.n	80013aa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2208      	movs	r2, #8
 80013cc:	4013      	ands	r3, r2
 80013ce:	d036      	beq.n	800143e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d019      	beq.n	800140c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80013da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fad4 	bl	8000990 <HAL_GetTick>
 80013e8:	0003      	movs	r3, r0
 80013ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ee:	f7ff facf 	bl	8000990 <HAL_GetTick>
 80013f2:	0002      	movs	r2, r0
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e1e2      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d0f1      	beq.n	80013ee <HAL_RCC_OscConfig+0x242>
 800140a:	e018      	b.n	800143e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800140e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff faba 	bl	8000990 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fab5 	bl	8000990 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1c8      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	d1f1      	bne.n	8001422 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2204      	movs	r2, #4
 8001444:	4013      	ands	r3, r2
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x29e>
 8001448:	e0b6      	b.n	80015b8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	231f      	movs	r3, #31
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	055b      	lsls	r3, r3, #21
 800145a:	4013      	ands	r3, r2
 800145c:	d111      	bne.n	8001482 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	0549      	lsls	r1, r1, #21
 8001468:	430a      	orrs	r2, r1
 800146a:	61da      	str	r2, [r3, #28]
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 800146e:	69da      	ldr	r2, [r3, #28]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	055b      	lsls	r3, r3, #21
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800147a:	231f      	movs	r3, #31
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_RCC_OscConfig+0x33c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4013      	ands	r3, r2
 800148c:	d11a      	bne.n	80014c4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <HAL_RCC_OscConfig+0x33c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_RCC_OscConfig+0x33c>)
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	0049      	lsls	r1, r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149c:	f7ff fa78 	bl	8000990 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fa73 	bl	8000990 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b64      	cmp	r3, #100	; 0x64
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e186      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_RCC_OscConfig+0x33c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4013      	ands	r3, r2
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10f      	bne.n	80014ec <HAL_RCC_OscConfig+0x340>
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 80014d2:	2101      	movs	r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	621a      	str	r2, [r3, #32]
 80014d8:	e036      	b.n	8001548 <HAL_RCC_OscConfig+0x39c>
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40021000 	.word	0x40021000
 80014e0:	fffeffff 	.word	0xfffeffff
 80014e4:	fffbffff 	.word	0xfffbffff
 80014e8:	40007000 	.word	0x40007000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x362>
 80014f4:	4bb6      	ldr	r3, [pc, #728]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80014f6:	6a1a      	ldr	r2, [r3, #32]
 80014f8:	4bb5      	ldr	r3, [pc, #724]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	621a      	str	r2, [r3, #32]
 8001500:	4bb3      	ldr	r3, [pc, #716]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001502:	6a1a      	ldr	r2, [r3, #32]
 8001504:	4bb2      	ldr	r3, [pc, #712]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001506:	2104      	movs	r1, #4
 8001508:	438a      	bics	r2, r1
 800150a:	621a      	str	r2, [r3, #32]
 800150c:	e01c      	b.n	8001548 <HAL_RCC_OscConfig+0x39c>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x384>
 8001516:	4bae      	ldr	r3, [pc, #696]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001518:	6a1a      	ldr	r2, [r3, #32]
 800151a:	4bad      	ldr	r3, [pc, #692]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800151c:	2104      	movs	r1, #4
 800151e:	430a      	orrs	r2, r1
 8001520:	621a      	str	r2, [r3, #32]
 8001522:	4bab      	ldr	r3, [pc, #684]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	4baa      	ldr	r3, [pc, #680]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	621a      	str	r2, [r3, #32]
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0x39c>
 8001530:	4ba7      	ldr	r3, [pc, #668]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	4ba6      	ldr	r3, [pc, #664]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001536:	2101      	movs	r1, #1
 8001538:	438a      	bics	r2, r1
 800153a:	621a      	str	r2, [r3, #32]
 800153c:	4ba4      	ldr	r3, [pc, #656]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800153e:	6a1a      	ldr	r2, [r3, #32]
 8001540:	4ba3      	ldr	r3, [pc, #652]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001542:	2104      	movs	r1, #4
 8001544:	438a      	bics	r2, r1
 8001546:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d014      	beq.n	800157a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fa1e 	bl	8000990 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	e009      	b.n	800156e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fa19 	bl	8000990 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	4a9b      	ldr	r2, [pc, #620]	; (80017d4 <HAL_RCC_OscConfig+0x628>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e12b      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	4b98      	ldr	r3, [pc, #608]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x3ae>
 8001578:	e013      	b.n	80015a2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff fa09 	bl	8000990 <HAL_GetTick>
 800157e:	0003      	movs	r3, r0
 8001580:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	e009      	b.n	8001598 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001584:	f7ff fa04 	bl	8000990 <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	4a91      	ldr	r2, [pc, #580]	; (80017d4 <HAL_RCC_OscConfig+0x628>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e116      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015a2:	231f      	movs	r3, #31
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ac:	4b88      	ldr	r3, [pc, #544]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80015ae:	69da      	ldr	r2, [r3, #28]
 80015b0:	4b87      	ldr	r3, [pc, #540]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80015b2:	4989      	ldr	r1, [pc, #548]	; (80017d8 <HAL_RCC_OscConfig+0x62c>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2210      	movs	r2, #16
 80015be:	4013      	ands	r3, r2
 80015c0:	d063      	beq.n	800168a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d12a      	bne.n	8001620 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015ca:	4b81      	ldr	r3, [pc, #516]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80015cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ce:	4b80      	ldr	r3, [pc, #512]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80015d0:	2104      	movs	r1, #4
 80015d2:	430a      	orrs	r2, r1
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80015d6:	4b7e      	ldr	r3, [pc, #504]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80015d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015da:	4b7d      	ldr	r3, [pc, #500]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80015dc:	2101      	movs	r1, #1
 80015de:	430a      	orrs	r2, r1
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff f9d5 	bl	8000990 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015ec:	f7ff f9d0 	bl	8000990 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0e3      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015fe:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d0f1      	beq.n	80015ec <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001608:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160c:	22f8      	movs	r2, #248	; 0xf8
 800160e:	4393      	bics	r3, r2
 8001610:	0019      	movs	r1, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	00da      	lsls	r2, r3, #3
 8001618:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800161a:	430a      	orrs	r2, r1
 800161c:	635a      	str	r2, [r3, #52]	; 0x34
 800161e:	e034      	b.n	800168a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	3305      	adds	r3, #5
 8001626:	d111      	bne.n	800164c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001628:	4b69      	ldr	r3, [pc, #420]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800162a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162c:	4b68      	ldr	r3, [pc, #416]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800162e:	2104      	movs	r1, #4
 8001630:	438a      	bics	r2, r1
 8001632:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001634:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	22f8      	movs	r2, #248	; 0xf8
 800163a:	4393      	bics	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	00da      	lsls	r2, r3, #3
 8001644:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001646:	430a      	orrs	r2, r1
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
 800164a:	e01e      	b.n	800168a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800164c:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800164e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001650:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001652:	2104      	movs	r1, #4
 8001654:	430a      	orrs	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001658:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800165a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800165c:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff f994 	bl	8000990 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800166e:	f7ff f98f 	bl	8000990 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0a2      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d1f1      	bne.n	800166e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d100      	bne.n	8001694 <HAL_RCC_OscConfig+0x4e8>
 8001692:	e097      	b.n	80017c4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001694:	4b4e      	ldr	r3, [pc, #312]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	220c      	movs	r2, #12
 800169a:	4013      	ands	r3, r2
 800169c:	2b08      	cmp	r3, #8
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4f6>
 80016a0:	e06b      	b.n	800177a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d14c      	bne.n	8001744 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b49      	ldr	r3, [pc, #292]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80016b0:	494a      	ldr	r1, [pc, #296]	; (80017dc <HAL_RCC_OscConfig+0x630>)
 80016b2:	400a      	ands	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff f96b 	bl	8000990 <HAL_GetTick>
 80016ba:	0003      	movs	r3, r0
 80016bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff f966 	bl	8000990 <HAL_GetTick>
 80016c4:	0002      	movs	r2, r0
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e079      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	049b      	lsls	r3, r3, #18
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016de:	4b3c      	ldr	r3, [pc, #240]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	220f      	movs	r2, #15
 80016e4:	4393      	bics	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4a3a      	ldr	r2, [pc, #232]	; (80017e0 <HAL_RCC_OscConfig+0x634>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	0019      	movs	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	431a      	orrs	r2, r3
 8001706:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0449      	lsls	r1, r1, #17
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff f939 	bl	8000990 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff f934 	bl	8000990 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e047      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	049b      	lsls	r3, r3, #18
 800173e:	4013      	ands	r3, r2
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x578>
 8001742:	e03f      	b.n	80017c4 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800174a:	4924      	ldr	r1, [pc, #144]	; (80017dc <HAL_RCC_OscConfig+0x630>)
 800174c:	400a      	ands	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff f91e 	bl	8000990 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff f919 	bl	8000990 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e02c      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	049b      	lsls	r3, r3, #18
 8001774:	4013      	ands	r3, r2
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x5ae>
 8001778:	e024      	b.n	80017c4 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e01f      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800178c:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	401a      	ands	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179e:	429a      	cmp	r2, r3
 80017a0:	d10e      	bne.n	80017c0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	220f      	movs	r2, #15
 80017a6:	401a      	ands	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d107      	bne.n	80017c0 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	23f0      	movs	r3, #240	; 0xf0
 80017b4:	039b      	lsls	r3, r3, #14
 80017b6:	401a      	ands	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b008      	add	sp, #32
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40021000 	.word	0x40021000
 80017d4:	00001388 	.word	0x00001388
 80017d8:	efffffff 	.word	0xefffffff
 80017dc:	feffffff 	.word	0xfeffffff
 80017e0:	ffc2ffff 	.word	0xffc2ffff

080017e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b3      	b.n	8001960 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <HAL_RCC_ClockConfig+0x184>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d911      	bls.n	800182a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b58      	ldr	r3, [pc, #352]	; (8001968 <HAL_RCC_ClockConfig+0x184>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	4393      	bics	r3, r2
 800180e:	0019      	movs	r1, r3
 8001810:	4b55      	ldr	r3, [pc, #340]	; (8001968 <HAL_RCC_ClockConfig+0x184>)
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x184>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d001      	beq.n	800182a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e09a      	b.n	8001960 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2202      	movs	r2, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d015      	beq.n	8001860 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2204      	movs	r2, #4
 800183a:	4013      	ands	r3, r2
 800183c:	d006      	beq.n	800184c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800183e:	4b4b      	ldr	r3, [pc, #300]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 8001844:	21e0      	movs	r1, #224	; 0xe0
 8001846:	00c9      	lsls	r1, r1, #3
 8001848:	430a      	orrs	r2, r1
 800184a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	22f0      	movs	r2, #240	; 0xf0
 8001852:	4393      	bics	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	d040      	beq.n	80018ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	029b      	lsls	r3, r3, #10
 800187a:	4013      	ands	r3, r2
 800187c:	d114      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06e      	b.n	8001960 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188a:	4b38      	ldr	r3, [pc, #224]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	049b      	lsls	r3, r3, #18
 8001892:	4013      	ands	r3, r2
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e062      	b.n	8001960 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189a:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2202      	movs	r2, #2
 80018a0:	4013      	ands	r3, r2
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e05b      	b.n	8001960 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	4393      	bics	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018bc:	f7ff f868 	bl	8000990 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c4:	e009      	b.n	80018da <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c6:	f7ff f863 	bl	8000990 <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_RCC_ClockConfig+0x18c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e042      	b.n	8001960 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	220c      	movs	r2, #12
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1ec      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_ClockConfig+0x184>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d211      	bcs.n	800191e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_ClockConfig+0x184>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2201      	movs	r2, #1
 8001900:	4393      	bics	r3, r2
 8001902:	0019      	movs	r1, r3
 8001904:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_RCC_ClockConfig+0x184>)
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_RCC_ClockConfig+0x184>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	4013      	ands	r3, r2
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e020      	b.n	8001960 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2204      	movs	r2, #4
 8001924:	4013      	ands	r3, r2
 8001926:	d009      	beq.n	800193c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_RCC_ClockConfig+0x190>)
 800192e:	4013      	ands	r3, r2
 8001930:	0019      	movs	r1, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800193c:	f000 f820 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 8001940:	0001      	movs	r1, r0
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x188>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	220f      	movs	r2, #15
 800194a:	4013      	ands	r3, r2
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x194>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	000a      	movs	r2, r1
 8001952:	40da      	lsrs	r2, r3
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x198>)
 8001956:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001958:	2000      	movs	r0, #0
 800195a:	f7fe ffd3 	bl	8000904 <HAL_InitTick>
  
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	b004      	add	sp, #16
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40022000 	.word	0x40022000
 800196c:	40021000 	.word	0x40021000
 8001970:	00001388 	.word	0x00001388
 8001974:	fffff8ff 	.word	0xfffff8ff
 8001978:	08003424 	.word	0x08003424
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b08f      	sub	sp, #60	; 0x3c
 8001984:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001986:	2314      	movs	r3, #20
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 800198c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800198e:	c313      	stmia	r3!, {r0, r1, r4}
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4a29      	ldr	r2, [pc, #164]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001998:	ca13      	ldmia	r2!, {r0, r1, r4}
 800199a:	c313      	stmia	r3!, {r0, r1, r4}
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019bc:	220c      	movs	r2, #12
 80019be:	4013      	ands	r3, r2
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d002      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x4a>
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d003      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x50>
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019ce:	e02d      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d2:	0c9b      	lsrs	r3, r3, #18
 80019d4:	220f      	movs	r2, #15
 80019d6:	4013      	ands	r3, r2
 80019d8:	2214      	movs	r2, #20
 80019da:	18ba      	adds	r2, r7, r2
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	220f      	movs	r2, #15
 80019e6:	4013      	ands	r3, r2
 80019e8:	1d3a      	adds	r2, r7, #4
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	025b      	lsls	r3, r3, #9
 80019f4:	4013      	ands	r3, r2
 80019f6:	d009      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019fa:	4812      	ldr	r0, [pc, #72]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019fc:	f7fe fb84 	bl	8000108 <__udivsi3>
 8001a00:	0003      	movs	r3, r0
 8001a02:	001a      	movs	r2, r3
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	4353      	muls	r3, r2
 8001a08:	637b      	str	r3, [r7, #52]	; 0x34
 8001a0a:	e009      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a0e:	000a      	movs	r2, r1
 8001a10:	0152      	lsls	r2, r2, #5
 8001a12:	1a52      	subs	r2, r2, r1
 8001a14:	0193      	lsls	r3, r2, #6
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	185b      	adds	r3, r3, r1
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a24:	e002      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a2a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a2e:	0018      	movs	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b00f      	add	sp, #60	; 0x3c
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	08003404 	.word	0x08003404
 8001a3c:	08003414 	.word	0x08003414
 8001a40:	40021000 	.word	0x40021000
 8001a44:	007a1200 	.word	0x007a1200

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a60:	f7ff fff2 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a64:	0001      	movs	r1, r0
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	4013      	ands	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	40d9      	lsrs	r1, r3
 8001a76:	000b      	movs	r3, r1
}    
 8001a78:	0018      	movs	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08003434 	.word	0x08003434

08001a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e044      	b.n	8001b24 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d107      	bne.n	8001ab2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2270      	movs	r2, #112	; 0x70
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7fe fdd3 	bl	8000658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2224      	movs	r2, #36	; 0x24
 8001ab6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 f988 	bl	8001de0 <UART_SetConfig>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e024      	b.n	8001b24 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 fb01 	bl	80020ec <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	490d      	ldr	r1, [pc, #52]	; (8001b2c <HAL_UART_Init+0xa4>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2108      	movs	r1, #8
 8001b06:	438a      	bics	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2101      	movs	r1, #1
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 fb99 	bl	8002254 <UART_CheckIdleState>
 8001b22:	0003      	movs	r3, r0
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	fffff7ff 	.word	0xfffff7ff

08001b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	1dbb      	adds	r3, r7, #6
 8001b3e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d000      	beq.n	8001b4a <HAL_UART_Transmit+0x1a>
 8001b48:	e095      	b.n	8001c76 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_UART_Transmit+0x28>
 8001b50:	1dbb      	adds	r3, r7, #6
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e08d      	b.n	8001c78 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	015b      	lsls	r3, r3, #5
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d109      	bne.n	8001b7c <HAL_UART_Transmit+0x4c>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2201      	movs	r2, #1
 8001b74:	4013      	ands	r3, r2
 8001b76:	d001      	beq.n	8001b7c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e07d      	b.n	8001c78 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2270      	movs	r2, #112	; 0x70
 8001b80:	5c9b      	ldrb	r3, [r3, r2]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Transmit+0x5a>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e076      	b.n	8001c78 <HAL_UART_Transmit+0x148>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2270      	movs	r2, #112	; 0x70
 8001b8e:	2101      	movs	r1, #1
 8001b90:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2221      	movs	r2, #33	; 0x21
 8001b9c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001b9e:	f7fe fef7 	bl	8000990 <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1dba      	adds	r2, r7, #6
 8001baa:	2150      	movs	r1, #80	; 0x50
 8001bac:	8812      	ldrh	r2, [r2, #0]
 8001bae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1dba      	adds	r2, r7, #6
 8001bb4:	2152      	movs	r1, #82	; 0x52
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	015b      	lsls	r3, r3, #5
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d108      	bne.n	8001bd8 <HAL_UART_Transmit+0xa8>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d104      	bne.n	8001bd8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	e003      	b.n	8001be0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001be0:	e02d      	b.n	8001c3e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	0013      	movs	r3, r2
 8001bec:	2200      	movs	r2, #0
 8001bee:	2180      	movs	r1, #128	; 0x80
 8001bf0:	f000 fb76 	bl	80022e0 <UART_WaitOnFlagUntilTimeout>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e03d      	b.n	8001c78 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10b      	bne.n	8001c1a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	05d2      	lsls	r2, r2, #23
 8001c0c:	0dd2      	lsrs	r2, r2, #23
 8001c0e:	b292      	uxth	r2, r2
 8001c10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	3302      	adds	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	e008      	b.n	8001c2c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b292      	uxth	r2, r2
 8001c24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2252      	movs	r2, #82	; 0x52
 8001c30:	5a9b      	ldrh	r3, [r3, r2]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b299      	uxth	r1, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2252      	movs	r2, #82	; 0x52
 8001c3c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2252      	movs	r2, #82	; 0x52
 8001c42:	5a9b      	ldrh	r3, [r3, r2]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1cb      	bne.n	8001be2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	0013      	movs	r3, r2
 8001c54:	2200      	movs	r2, #0
 8001c56:	2140      	movs	r1, #64	; 0x40
 8001c58:	f000 fb42 	bl	80022e0 <UART_WaitOnFlagUntilTimeout>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e009      	b.n	8001c78 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2270      	movs	r2, #112	; 0x70
 8001c6e:	2100      	movs	r1, #0
 8001c70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
  }
}
 8001c78:	0018      	movs	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b008      	add	sp, #32
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	1dbb      	adds	r3, r7, #6
 8001c8c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d000      	beq.n	8001c98 <HAL_UART_Receive_DMA+0x18>
 8001c96:	e07f      	b.n	8001d98 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_UART_Receive_DMA+0x26>
 8001c9e:	1dbb      	adds	r3, r7, #6
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e077      	b.n	8001d9a <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	015b      	lsls	r3, r3, #5
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d109      	bne.n	8001cca <HAL_UART_Receive_DMA+0x4a>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d105      	bne.n	8001cca <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d001      	beq.n	8001cca <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e067      	b.n	8001d9a <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2270      	movs	r2, #112	; 0x70
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_UART_Receive_DMA+0x58>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e060      	b.n	8001d9a <HAL_UART_Receive_DMA+0x11a>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2270      	movs	r2, #112	; 0x70
 8001cdc:	2101      	movs	r1, #1
 8001cde:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1dba      	adds	r2, r7, #6
 8001cea:	2158      	movs	r1, #88	; 0x58
 8001cec:	8812      	ldrh	r2, [r2, #0]
 8001cee:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2222      	movs	r2, #34	; 0x22
 8001cfa:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d02a      	beq.n	8001d5a <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d08:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_UART_Receive_DMA+0x124>)
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_UART_Receive_DMA+0x128>)
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d18:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_UART_Receive_DMA+0x12c>)
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d20:	2200      	movs	r2, #0
 8001d22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3324      	adds	r3, #36	; 0x24
 8001d2e:	0019      	movs	r1, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	001a      	movs	r2, r3
 8001d36:	1dbb      	adds	r3, r7, #6
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	f7fe ff59 	bl	8000bf0 <HAL_DMA_Start_IT>
 8001d3e:	1e03      	subs	r3, r0, #0
 8001d40:	d00b      	beq.n	8001d5a <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2210      	movs	r2, #16
 8001d46:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2270      	movs	r2, #112	; 0x70
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e01f      	b.n	8001d9a <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2270      	movs	r2, #112	; 0x70
 8001d5e:	2100      	movs	r1, #0
 8001d60:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	0049      	lsls	r1, r1, #1
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2101      	movs	r1, #1
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
  }
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	08002445 	.word	0x08002445
 8001da8:	080024ad 	.word	0x080024ad
 8001dac:	080024cb 	.word	0x080024cb

08001db0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dec:	2317      	movs	r3, #23
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4aad      	ldr	r2, [pc, #692]	; (80020c8 <UART_SetConfig+0x2e8>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4aa8      	ldr	r2, [pc, #672]	; (80020cc <UART_SetConfig+0x2ec>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a9f      	ldr	r2, [pc, #636]	; (80020d0 <UART_SetConfig+0x2f0>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a9b      	ldr	r2, [pc, #620]	; (80020d4 <UART_SetConfig+0x2f4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d125      	bne.n	8001eb6 <UART_SetConfig+0xd6>
 8001e6a:	4b9b      	ldr	r3, [pc, #620]	; (80020d8 <UART_SetConfig+0x2f8>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d00f      	beq.n	8001e96 <UART_SetConfig+0xb6>
 8001e76:	d304      	bcc.n	8001e82 <UART_SetConfig+0xa2>
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d011      	beq.n	8001ea0 <UART_SetConfig+0xc0>
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d005      	beq.n	8001e8c <UART_SetConfig+0xac>
 8001e80:	e013      	b.n	8001eaa <UART_SetConfig+0xca>
 8001e82:	231f      	movs	r3, #31
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	e022      	b.n	8001ed2 <UART_SetConfig+0xf2>
 8001e8c:	231f      	movs	r3, #31
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2202      	movs	r2, #2
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e01d      	b.n	8001ed2 <UART_SetConfig+0xf2>
 8001e96:	231f      	movs	r3, #31
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e018      	b.n	8001ed2 <UART_SetConfig+0xf2>
 8001ea0:	231f      	movs	r3, #31
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e013      	b.n	8001ed2 <UART_SetConfig+0xf2>
 8001eaa:	231f      	movs	r3, #31
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2210      	movs	r2, #16
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	e00d      	b.n	8001ed2 <UART_SetConfig+0xf2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a88      	ldr	r2, [pc, #544]	; (80020dc <UART_SetConfig+0x2fc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d104      	bne.n	8001eca <UART_SetConfig+0xea>
 8001ec0:	231f      	movs	r3, #31
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e003      	b.n	8001ed2 <UART_SetConfig+0xf2>
 8001eca:	231f      	movs	r3, #31
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2210      	movs	r2, #16
 8001ed0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d000      	beq.n	8001ee0 <UART_SetConfig+0x100>
 8001ede:	e07d      	b.n	8001fdc <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8001ee0:	231f      	movs	r3, #31
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d01c      	beq.n	8001f24 <UART_SetConfig+0x144>
 8001eea:	dc02      	bgt.n	8001ef2 <UART_SetConfig+0x112>
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <UART_SetConfig+0x11c>
 8001ef0:	e04b      	b.n	8001f8a <UART_SetConfig+0x1aa>
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d025      	beq.n	8001f42 <UART_SetConfig+0x162>
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d037      	beq.n	8001f6a <UART_SetConfig+0x18a>
 8001efa:	e046      	b.n	8001f8a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001efc:	f7ff fdae 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8001f00:	0003      	movs	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	005a      	lsls	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	085b      	lsrs	r3, r3, #1
 8001f0e:	18d2      	adds	r2, r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0019      	movs	r1, r3
 8001f16:	0010      	movs	r0, r2
 8001f18:	f7fe f8f6 	bl	8000108 <__udivsi3>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	61bb      	str	r3, [r7, #24]
        break;
 8001f22:	e037      	b.n	8001f94 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	4a6d      	ldr	r2, [pc, #436]	; (80020e0 <UART_SetConfig+0x300>)
 8001f2c:	189a      	adds	r2, r3, r2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	0019      	movs	r1, r3
 8001f34:	0010      	movs	r0, r2
 8001f36:	f7fe f8e7 	bl	8000108 <__udivsi3>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	61bb      	str	r3, [r7, #24]
        break;
 8001f40:	e028      	b.n	8001f94 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f42:	f7ff fd1d 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 8001f46:	0003      	movs	r3, r0
 8001f48:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	005a      	lsls	r2, r3, #1
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	18d2      	adds	r2, r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f7fe f8d3 	bl	8000108 <__udivsi3>
 8001f62:	0003      	movs	r3, r0
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	61bb      	str	r3, [r7, #24]
        break;
 8001f68:	e014      	b.n	8001f94 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	0252      	lsls	r2, r2, #9
 8001f74:	189a      	adds	r2, r3, r2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	f7fe f8c3 	bl	8000108 <__udivsi3>
 8001f82:	0003      	movs	r3, r0
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	61bb      	str	r3, [r7, #24]
        break;
 8001f88:	e004      	b.n	8001f94 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8001f8a:	2317      	movs	r3, #23
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
        break;
 8001f92:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	d91b      	bls.n	8001fd2 <UART_SetConfig+0x1f2>
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <UART_SetConfig+0x304>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d817      	bhi.n	8001fd2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	200a      	movs	r0, #10
 8001fa8:	183b      	adds	r3, r7, r0
 8001faa:	210f      	movs	r1, #15
 8001fac:	438a      	bics	r2, r1
 8001fae:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	4013      	ands	r3, r2
 8001fba:	b299      	uxth	r1, r3
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	183a      	adds	r2, r7, r0
 8001fc0:	8812      	ldrh	r2, [r2, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	183a      	adds	r2, r7, r0
 8001fcc:	8812      	ldrh	r2, [r2, #0]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	e06c      	b.n	80020ac <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8001fd2:	2317      	movs	r3, #23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e067      	b.n	80020ac <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8001fdc:	231f      	movs	r3, #31
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d01b      	beq.n	800201e <UART_SetConfig+0x23e>
 8001fe6:	dc02      	bgt.n	8001fee <UART_SetConfig+0x20e>
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <UART_SetConfig+0x218>
 8001fec:	e049      	b.n	8002082 <UART_SetConfig+0x2a2>
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d024      	beq.n	800203c <UART_SetConfig+0x25c>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d035      	beq.n	8002062 <UART_SetConfig+0x282>
 8001ff6:	e044      	b.n	8002082 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ff8:	f7ff fd30 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	085a      	lsrs	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	18d2      	adds	r2, r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	0019      	movs	r1, r3
 8002010:	0010      	movs	r0, r2
 8002012:	f7fe f879 	bl	8000108 <__udivsi3>
 8002016:	0003      	movs	r3, r0
 8002018:	b29b      	uxth	r3, r3
 800201a:	61bb      	str	r3, [r7, #24]
        break;
 800201c:	e036      	b.n	800208c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <UART_SetConfig+0x308>)
 8002026:	189a      	adds	r2, r3, r2
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	0019      	movs	r1, r3
 800202e:	0010      	movs	r0, r2
 8002030:	f7fe f86a 	bl	8000108 <__udivsi3>
 8002034:	0003      	movs	r3, r0
 8002036:	b29b      	uxth	r3, r3
 8002038:	61bb      	str	r3, [r7, #24]
        break;
 800203a:	e027      	b.n	800208c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800203c:	f7ff fca0 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 8002040:	0003      	movs	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	085a      	lsrs	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	18d2      	adds	r2, r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0019      	movs	r1, r3
 8002054:	0010      	movs	r0, r2
 8002056:	f7fe f857 	bl	8000108 <__udivsi3>
 800205a:	0003      	movs	r3, r0
 800205c:	b29b      	uxth	r3, r3
 800205e:	61bb      	str	r3, [r7, #24]
        break;
 8002060:	e014      	b.n	800208c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	2280      	movs	r2, #128	; 0x80
 800206a:	0212      	lsls	r2, r2, #8
 800206c:	189a      	adds	r2, r3, r2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0019      	movs	r1, r3
 8002074:	0010      	movs	r0, r2
 8002076:	f7fe f847 	bl	8000108 <__udivsi3>
 800207a:	0003      	movs	r3, r0
 800207c:	b29b      	uxth	r3, r3
 800207e:	61bb      	str	r3, [r7, #24]
        break;
 8002080:	e004      	b.n	800208c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002082:	2317      	movs	r3, #23
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
        break;
 800208a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	d908      	bls.n	80020a4 <UART_SetConfig+0x2c4>
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <UART_SetConfig+0x304>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d804      	bhi.n	80020a4 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	e003      	b.n	80020ac <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80020a4:	2317      	movs	r3, #23
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80020b8:	2317      	movs	r3, #23
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b008      	add	sp, #32
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	ffff69f3 	.word	0xffff69f3
 80020cc:	ffffcfff 	.word	0xffffcfff
 80020d0:	fffff4ff 	.word	0xfffff4ff
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40004400 	.word	0x40004400
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	0000ffff 	.word	0x0000ffff
 80020e8:	007a1200 	.word	0x007a1200

080020ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	d00b      	beq.n	8002116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <UART_AdvFeatureConfig+0x144>)
 8002106:	4013      	ands	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d00b      	beq.n	8002138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a43      	ldr	r2, [pc, #268]	; (8002234 <UART_AdvFeatureConfig+0x148>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	2204      	movs	r2, #4
 800213e:	4013      	ands	r3, r2
 8002140:	d00b      	beq.n	800215a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a3b      	ldr	r2, [pc, #236]	; (8002238 <UART_AdvFeatureConfig+0x14c>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	2208      	movs	r2, #8
 8002160:	4013      	ands	r3, r2
 8002162:	d00b      	beq.n	800217c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4a34      	ldr	r2, [pc, #208]	; (800223c <UART_AdvFeatureConfig+0x150>)
 800216c:	4013      	ands	r3, r2
 800216e:	0019      	movs	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2210      	movs	r2, #16
 8002182:	4013      	ands	r3, r2
 8002184:	d00b      	beq.n	800219e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <UART_AdvFeatureConfig+0x154>)
 800218e:	4013      	ands	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	2220      	movs	r2, #32
 80021a4:	4013      	ands	r3, r2
 80021a6:	d00b      	beq.n	80021c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <UART_AdvFeatureConfig+0x158>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2240      	movs	r2, #64	; 0x40
 80021c6:	4013      	ands	r3, r2
 80021c8:	d01d      	beq.n	8002206 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <UART_AdvFeatureConfig+0x15c>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	035b      	lsls	r3, r3, #13
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d10b      	bne.n	8002206 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a15      	ldr	r2, [pc, #84]	; (800224c <UART_AdvFeatureConfig+0x160>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	4013      	ands	r3, r2
 800220e:	d00b      	beq.n	8002228 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <UART_AdvFeatureConfig+0x164>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
  }
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}
 8002230:	fffdffff 	.word	0xfffdffff
 8002234:	fffeffff 	.word	0xfffeffff
 8002238:	fffbffff 	.word	0xfffbffff
 800223c:	ffff7fff 	.word	0xffff7fff
 8002240:	ffffefff 	.word	0xffffefff
 8002244:	ffffdfff 	.word	0xffffdfff
 8002248:	ffefffff 	.word	0xffefffff
 800224c:	ff9fffff 	.word	0xff9fffff
 8002250:	fff7ffff 	.word	0xfff7ffff

08002254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002262:	f7fe fb95 	bl	8000990 <HAL_GetTick>
 8002266:	0003      	movs	r3, r0
 8002268:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2208      	movs	r2, #8
 8002272:	4013      	ands	r3, r2
 8002274:	2b08      	cmp	r3, #8
 8002276:	d10d      	bne.n	8002294 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	0399      	lsls	r1, r3, #14
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <UART_CheckIdleState+0x88>)
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	0013      	movs	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	f000 f82a 	bl	80022e0 <UART_WaitOnFlagUntilTimeout>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e01f      	b.n	80022d4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2204      	movs	r2, #4
 800229c:	4013      	ands	r3, r2
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d10d      	bne.n	80022be <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	03d9      	lsls	r1, r3, #15
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <UART_CheckIdleState+0x88>)
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	0013      	movs	r3, r2
 80022b0:	2200      	movs	r2, #0
 80022b2:	f000 f815 	bl	80022e0 <UART_WaitOnFlagUntilTimeout>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e00a      	b.n	80022d4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2220      	movs	r2, #32
 80022c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2270      	movs	r2, #112	; 0x70
 80022ce:	2100      	movs	r1, #0
 80022d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	01ffffff 	.word	0x01ffffff

080022e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f0:	e05d      	b.n	80023ae <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	3301      	adds	r3, #1
 80022f6:	d05a      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f8:	f7fe fb4a 	bl	8000990 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	429a      	cmp	r2, r3
 8002306:	d302      	bcc.n	800230e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d11b      	bne.n	8002346 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	492f      	ldr	r1, [pc, #188]	; (80023d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800231a:	400a      	ands	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	438a      	bics	r2, r1
 800232c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2270      	movs	r2, #112	; 0x70
 800233e:	2100      	movs	r1, #0
 8002340:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e043      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2204      	movs	r2, #4
 800234e:	4013      	ands	r3, r2
 8002350:	d02d      	beq.n	80023ae <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	401a      	ands	r2, r3
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	429a      	cmp	r2, r3
 8002364:	d123      	bne.n	80023ae <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4917      	ldr	r1, [pc, #92]	; (80023d8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800237c:	400a      	ands	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2270      	movs	r2, #112	; 0x70
 80023a6:	2100      	movs	r1, #0
 80023a8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e00f      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	4013      	ands	r3, r2
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	425a      	negs	r2, r3
 80023be:	4153      	adcs	r3, r2
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	001a      	movs	r2, r3
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d092      	beq.n	80022f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	0018      	movs	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	b004      	add	sp, #16
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	fffffe5f 	.word	0xfffffe5f

080023dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	21c0      	movs	r1, #192	; 0xc0
 80023f0:	438a      	bics	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	490a      	ldr	r1, [pc, #40]	; (8002440 <UART_EndRxTransfer+0x3c>)
 8002418:	400a      	ands	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	438a      	bics	r2, r1
 800242a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}
 8002440:	fffffedf 	.word	0xfffffedf

08002444 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b20      	cmp	r3, #32
 8002458:	d01e      	beq.n	8002498 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	225a      	movs	r2, #90	; 0x5a
 800245e:	2100      	movs	r1, #0
 8002460:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <UART_DMAReceiveCplt+0x64>)
 800246e:	400a      	ands	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	438a      	bics	r2, r1
 8002480:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2140      	movs	r1, #64	; 0x40
 800248e:	438a      	bics	r2, r1
 8002490:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	0018      	movs	r0, r3
 800249c:	f7ff fc88 	bl	8001db0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b004      	add	sp, #16
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	fffffeff 	.word	0xfffffeff

080024ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff fc7f 	bl	8001dc0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b004      	add	sp, #16
 80024c8:	bd80      	pop	{r7, pc}

080024ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	d10a      	bne.n	8002508 <UART_DMAError+0x3e>
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b21      	cmp	r3, #33	; 0x21
 80024f6:	d107      	bne.n	8002508 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2252      	movs	r2, #82	; 0x52
 80024fc:	2100      	movs	r1, #0
 80024fe:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff ff6a 	bl	80023dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	4013      	ands	r3, r2
 8002512:	2b40      	cmp	r3, #64	; 0x40
 8002514:	d10a      	bne.n	800252c <UART_DMAError+0x62>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b22      	cmp	r3, #34	; 0x22
 800251a:	d107      	bne.n	800252c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	225a      	movs	r2, #90	; 0x5a
 8002520:	2100      	movs	r1, #0
 8002522:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	0018      	movs	r0, r3
 8002528:	f7ff ff6c 	bl	8002404 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002530:	2210      	movs	r2, #16
 8002532:	431a      	orrs	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	0018      	movs	r0, r3
 800253c:	f7ff fc48 	bl	8001dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b006      	add	sp, #24
 8002546:	bd80      	pop	{r7, pc}

08002548 <__errno>:
 8002548:	4b01      	ldr	r3, [pc, #4]	; (8002550 <__errno+0x8>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	4770      	bx	lr
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	2000000c 	.word	0x2000000c

08002554 <__libc_init_array>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	2600      	movs	r6, #0
 8002558:	4d0c      	ldr	r5, [pc, #48]	; (800258c <__libc_init_array+0x38>)
 800255a:	4c0d      	ldr	r4, [pc, #52]	; (8002590 <__libc_init_array+0x3c>)
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	42a6      	cmp	r6, r4
 8002562:	d109      	bne.n	8002578 <__libc_init_array+0x24>
 8002564:	2600      	movs	r6, #0
 8002566:	f000 ff39 	bl	80033dc <_init>
 800256a:	4d0a      	ldr	r5, [pc, #40]	; (8002594 <__libc_init_array+0x40>)
 800256c:	4c0a      	ldr	r4, [pc, #40]	; (8002598 <__libc_init_array+0x44>)
 800256e:	1b64      	subs	r4, r4, r5
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	42a6      	cmp	r6, r4
 8002574:	d105      	bne.n	8002582 <__libc_init_array+0x2e>
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	00b3      	lsls	r3, r6, #2
 800257a:	58eb      	ldr	r3, [r5, r3]
 800257c:	4798      	blx	r3
 800257e:	3601      	adds	r6, #1
 8002580:	e7ee      	b.n	8002560 <__libc_init_array+0xc>
 8002582:	00b3      	lsls	r3, r6, #2
 8002584:	58eb      	ldr	r3, [r5, r3]
 8002586:	4798      	blx	r3
 8002588:	3601      	adds	r6, #1
 800258a:	e7f2      	b.n	8002572 <__libc_init_array+0x1e>
 800258c:	080034d4 	.word	0x080034d4
 8002590:	080034d4 	.word	0x080034d4
 8002594:	080034d4 	.word	0x080034d4
 8002598:	080034d8 	.word	0x080034d8

0800259c <memset>:
 800259c:	0003      	movs	r3, r0
 800259e:	1812      	adds	r2, r2, r0
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d100      	bne.n	80025a6 <memset+0xa>
 80025a4:	4770      	bx	lr
 80025a6:	7019      	strb	r1, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	e7f9      	b.n	80025a0 <memset+0x4>

080025ac <iprintf>:
 80025ac:	b40f      	push	{r0, r1, r2, r3}
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <iprintf+0x30>)
 80025b0:	b513      	push	{r0, r1, r4, lr}
 80025b2:	681c      	ldr	r4, [r3, #0]
 80025b4:	2c00      	cmp	r4, #0
 80025b6:	d005      	beq.n	80025c4 <iprintf+0x18>
 80025b8:	69a3      	ldr	r3, [r4, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <iprintf+0x18>
 80025be:	0020      	movs	r0, r4
 80025c0:	f000 f850 	bl	8002664 <__sinit>
 80025c4:	ab05      	add	r3, sp, #20
 80025c6:	9a04      	ldr	r2, [sp, #16]
 80025c8:	68a1      	ldr	r1, [r4, #8]
 80025ca:	0020      	movs	r0, r4
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	f000 f963 	bl	8002898 <_vfiprintf_r>
 80025d2:	bc16      	pop	{r1, r2, r4}
 80025d4:	bc08      	pop	{r3}
 80025d6:	b004      	add	sp, #16
 80025d8:	4718      	bx	r3
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	2000000c 	.word	0x2000000c

080025e0 <std>:
 80025e0:	2300      	movs	r3, #0
 80025e2:	b510      	push	{r4, lr}
 80025e4:	0004      	movs	r4, r0
 80025e6:	6003      	str	r3, [r0, #0]
 80025e8:	6043      	str	r3, [r0, #4]
 80025ea:	6083      	str	r3, [r0, #8]
 80025ec:	8181      	strh	r1, [r0, #12]
 80025ee:	6643      	str	r3, [r0, #100]	; 0x64
 80025f0:	81c2      	strh	r2, [r0, #14]
 80025f2:	6103      	str	r3, [r0, #16]
 80025f4:	6143      	str	r3, [r0, #20]
 80025f6:	6183      	str	r3, [r0, #24]
 80025f8:	0019      	movs	r1, r3
 80025fa:	2208      	movs	r2, #8
 80025fc:	305c      	adds	r0, #92	; 0x5c
 80025fe:	f7ff ffcd 	bl	800259c <memset>
 8002602:	4b05      	ldr	r3, [pc, #20]	; (8002618 <std+0x38>)
 8002604:	6224      	str	r4, [r4, #32]
 8002606:	6263      	str	r3, [r4, #36]	; 0x24
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <std+0x3c>)
 800260a:	62a3      	str	r3, [r4, #40]	; 0x28
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <std+0x40>)
 800260e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <std+0x44>)
 8002612:	6323      	str	r3, [r4, #48]	; 0x30
 8002614:	bd10      	pop	{r4, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	08002dd5 	.word	0x08002dd5
 800261c:	08002dfd 	.word	0x08002dfd
 8002620:	08002e35 	.word	0x08002e35
 8002624:	08002e61 	.word	0x08002e61

08002628 <_cleanup_r>:
 8002628:	b510      	push	{r4, lr}
 800262a:	4902      	ldr	r1, [pc, #8]	; (8002634 <_cleanup_r+0xc>)
 800262c:	f000 f88c 	bl	8002748 <_fwalk_reent>
 8002630:	bd10      	pop	{r4, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	08003165 	.word	0x08003165

08002638 <__sfmoreglue>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	2568      	movs	r5, #104	; 0x68
 800263c:	1e4a      	subs	r2, r1, #1
 800263e:	4355      	muls	r5, r2
 8002640:	000e      	movs	r6, r1
 8002642:	0029      	movs	r1, r5
 8002644:	3174      	adds	r1, #116	; 0x74
 8002646:	f000 f8a1 	bl	800278c <_malloc_r>
 800264a:	1e04      	subs	r4, r0, #0
 800264c:	d008      	beq.n	8002660 <__sfmoreglue+0x28>
 800264e:	2100      	movs	r1, #0
 8002650:	002a      	movs	r2, r5
 8002652:	6001      	str	r1, [r0, #0]
 8002654:	6046      	str	r6, [r0, #4]
 8002656:	300c      	adds	r0, #12
 8002658:	60a0      	str	r0, [r4, #8]
 800265a:	3268      	adds	r2, #104	; 0x68
 800265c:	f7ff ff9e 	bl	800259c <memset>
 8002660:	0020      	movs	r0, r4
 8002662:	bd70      	pop	{r4, r5, r6, pc}

08002664 <__sinit>:
 8002664:	6983      	ldr	r3, [r0, #24]
 8002666:	b513      	push	{r0, r1, r4, lr}
 8002668:	0004      	movs	r4, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d128      	bne.n	80026c0 <__sinit+0x5c>
 800266e:	6483      	str	r3, [r0, #72]	; 0x48
 8002670:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002672:	6503      	str	r3, [r0, #80]	; 0x50
 8002674:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <__sinit+0x60>)
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <__sinit+0x64>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6282      	str	r2, [r0, #40]	; 0x28
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	4298      	cmp	r0, r3
 8002680:	d101      	bne.n	8002686 <__sinit+0x22>
 8002682:	2301      	movs	r3, #1
 8002684:	6183      	str	r3, [r0, #24]
 8002686:	0020      	movs	r0, r4
 8002688:	f000 f820 	bl	80026cc <__sfp>
 800268c:	6060      	str	r0, [r4, #4]
 800268e:	0020      	movs	r0, r4
 8002690:	f000 f81c 	bl	80026cc <__sfp>
 8002694:	60a0      	str	r0, [r4, #8]
 8002696:	0020      	movs	r0, r4
 8002698:	f000 f818 	bl	80026cc <__sfp>
 800269c:	2200      	movs	r2, #0
 800269e:	60e0      	str	r0, [r4, #12]
 80026a0:	2104      	movs	r1, #4
 80026a2:	6860      	ldr	r0, [r4, #4]
 80026a4:	f7ff ff9c 	bl	80025e0 <std>
 80026a8:	2201      	movs	r2, #1
 80026aa:	2109      	movs	r1, #9
 80026ac:	68a0      	ldr	r0, [r4, #8]
 80026ae:	f7ff ff97 	bl	80025e0 <std>
 80026b2:	2202      	movs	r2, #2
 80026b4:	2112      	movs	r1, #18
 80026b6:	68e0      	ldr	r0, [r4, #12]
 80026b8:	f7ff ff92 	bl	80025e0 <std>
 80026bc:	2301      	movs	r3, #1
 80026be:	61a3      	str	r3, [r4, #24]
 80026c0:	bd13      	pop	{r0, r1, r4, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	0800343c 	.word	0x0800343c
 80026c8:	08002629 	.word	0x08002629

080026cc <__sfp>:
 80026cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <__sfp+0x74>)
 80026d0:	0007      	movs	r7, r0
 80026d2:	681e      	ldr	r6, [r3, #0]
 80026d4:	69b3      	ldr	r3, [r6, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <__sfp+0x14>
 80026da:	0030      	movs	r0, r6
 80026dc:	f7ff ffc2 	bl	8002664 <__sinit>
 80026e0:	3648      	adds	r6, #72	; 0x48
 80026e2:	68b4      	ldr	r4, [r6, #8]
 80026e4:	6873      	ldr	r3, [r6, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	d504      	bpl.n	80026f4 <__sfp+0x28>
 80026ea:	6833      	ldr	r3, [r6, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <__sfp+0x34>
 80026f0:	6836      	ldr	r6, [r6, #0]
 80026f2:	e7f6      	b.n	80026e2 <__sfp+0x16>
 80026f4:	220c      	movs	r2, #12
 80026f6:	5ea5      	ldrsh	r5, [r4, r2]
 80026f8:	2d00      	cmp	r5, #0
 80026fa:	d00d      	beq.n	8002718 <__sfp+0x4c>
 80026fc:	3468      	adds	r4, #104	; 0x68
 80026fe:	e7f2      	b.n	80026e6 <__sfp+0x1a>
 8002700:	2104      	movs	r1, #4
 8002702:	0038      	movs	r0, r7
 8002704:	f7ff ff98 	bl	8002638 <__sfmoreglue>
 8002708:	6030      	str	r0, [r6, #0]
 800270a:	2800      	cmp	r0, #0
 800270c:	d1f0      	bne.n	80026f0 <__sfp+0x24>
 800270e:	230c      	movs	r3, #12
 8002710:	0004      	movs	r4, r0
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	0020      	movs	r0, r4
 8002716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002718:	0020      	movs	r0, r4
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <__sfp+0x78>)
 800271c:	6665      	str	r5, [r4, #100]	; 0x64
 800271e:	6025      	str	r5, [r4, #0]
 8002720:	6065      	str	r5, [r4, #4]
 8002722:	60a5      	str	r5, [r4, #8]
 8002724:	60e3      	str	r3, [r4, #12]
 8002726:	6125      	str	r5, [r4, #16]
 8002728:	6165      	str	r5, [r4, #20]
 800272a:	61a5      	str	r5, [r4, #24]
 800272c:	2208      	movs	r2, #8
 800272e:	0029      	movs	r1, r5
 8002730:	305c      	adds	r0, #92	; 0x5c
 8002732:	f7ff ff33 	bl	800259c <memset>
 8002736:	6365      	str	r5, [r4, #52]	; 0x34
 8002738:	63a5      	str	r5, [r4, #56]	; 0x38
 800273a:	64a5      	str	r5, [r4, #72]	; 0x48
 800273c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800273e:	e7e9      	b.n	8002714 <__sfp+0x48>
 8002740:	0800343c 	.word	0x0800343c
 8002744:	ffff0001 	.word	0xffff0001

08002748 <_fwalk_reent>:
 8002748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800274a:	0004      	movs	r4, r0
 800274c:	0007      	movs	r7, r0
 800274e:	2600      	movs	r6, #0
 8002750:	9101      	str	r1, [sp, #4]
 8002752:	3448      	adds	r4, #72	; 0x48
 8002754:	2c00      	cmp	r4, #0
 8002756:	d101      	bne.n	800275c <_fwalk_reent+0x14>
 8002758:	0030      	movs	r0, r6
 800275a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800275c:	6863      	ldr	r3, [r4, #4]
 800275e:	68a5      	ldr	r5, [r4, #8]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	9b00      	ldr	r3, [sp, #0]
 8002764:	3b01      	subs	r3, #1
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	d501      	bpl.n	800276e <_fwalk_reent+0x26>
 800276a:	6824      	ldr	r4, [r4, #0]
 800276c:	e7f2      	b.n	8002754 <_fwalk_reent+0xc>
 800276e:	89ab      	ldrh	r3, [r5, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d908      	bls.n	8002786 <_fwalk_reent+0x3e>
 8002774:	220e      	movs	r2, #14
 8002776:	5eab      	ldrsh	r3, [r5, r2]
 8002778:	3301      	adds	r3, #1
 800277a:	d004      	beq.n	8002786 <_fwalk_reent+0x3e>
 800277c:	0029      	movs	r1, r5
 800277e:	0038      	movs	r0, r7
 8002780:	9b01      	ldr	r3, [sp, #4]
 8002782:	4798      	blx	r3
 8002784:	4306      	orrs	r6, r0
 8002786:	3568      	adds	r5, #104	; 0x68
 8002788:	e7eb      	b.n	8002762 <_fwalk_reent+0x1a>
	...

0800278c <_malloc_r>:
 800278c:	2303      	movs	r3, #3
 800278e:	b570      	push	{r4, r5, r6, lr}
 8002790:	1ccd      	adds	r5, r1, #3
 8002792:	439d      	bics	r5, r3
 8002794:	3508      	adds	r5, #8
 8002796:	0006      	movs	r6, r0
 8002798:	2d0c      	cmp	r5, #12
 800279a:	d21e      	bcs.n	80027da <_malloc_r+0x4e>
 800279c:	250c      	movs	r5, #12
 800279e:	42a9      	cmp	r1, r5
 80027a0:	d81d      	bhi.n	80027de <_malloc_r+0x52>
 80027a2:	0030      	movs	r0, r6
 80027a4:	f000 fd95 	bl	80032d2 <__malloc_lock>
 80027a8:	4a25      	ldr	r2, [pc, #148]	; (8002840 <_malloc_r+0xb4>)
 80027aa:	6814      	ldr	r4, [r2, #0]
 80027ac:	0021      	movs	r1, r4
 80027ae:	2900      	cmp	r1, #0
 80027b0:	d119      	bne.n	80027e6 <_malloc_r+0x5a>
 80027b2:	4c24      	ldr	r4, [pc, #144]	; (8002844 <_malloc_r+0xb8>)
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <_malloc_r+0x36>
 80027ba:	0030      	movs	r0, r6
 80027bc:	f000 faf8 	bl	8002db0 <_sbrk_r>
 80027c0:	6020      	str	r0, [r4, #0]
 80027c2:	0029      	movs	r1, r5
 80027c4:	0030      	movs	r0, r6
 80027c6:	f000 faf3 	bl	8002db0 <_sbrk_r>
 80027ca:	1c43      	adds	r3, r0, #1
 80027cc:	d12b      	bne.n	8002826 <_malloc_r+0x9a>
 80027ce:	230c      	movs	r3, #12
 80027d0:	0030      	movs	r0, r6
 80027d2:	6033      	str	r3, [r6, #0]
 80027d4:	f000 fd7e 	bl	80032d4 <__malloc_unlock>
 80027d8:	e003      	b.n	80027e2 <_malloc_r+0x56>
 80027da:	2d00      	cmp	r5, #0
 80027dc:	dadf      	bge.n	800279e <_malloc_r+0x12>
 80027de:	230c      	movs	r3, #12
 80027e0:	6033      	str	r3, [r6, #0]
 80027e2:	2000      	movs	r0, #0
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
 80027e6:	680b      	ldr	r3, [r1, #0]
 80027e8:	1b5b      	subs	r3, r3, r5
 80027ea:	d419      	bmi.n	8002820 <_malloc_r+0x94>
 80027ec:	2b0b      	cmp	r3, #11
 80027ee:	d903      	bls.n	80027f8 <_malloc_r+0x6c>
 80027f0:	600b      	str	r3, [r1, #0]
 80027f2:	18cc      	adds	r4, r1, r3
 80027f4:	6025      	str	r5, [r4, #0]
 80027f6:	e003      	b.n	8002800 <_malloc_r+0x74>
 80027f8:	684b      	ldr	r3, [r1, #4]
 80027fa:	428c      	cmp	r4, r1
 80027fc:	d10d      	bne.n	800281a <_malloc_r+0x8e>
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	0030      	movs	r0, r6
 8002802:	f000 fd67 	bl	80032d4 <__malloc_unlock>
 8002806:	0020      	movs	r0, r4
 8002808:	2207      	movs	r2, #7
 800280a:	300b      	adds	r0, #11
 800280c:	1d23      	adds	r3, r4, #4
 800280e:	4390      	bics	r0, r2
 8002810:	1ac3      	subs	r3, r0, r3
 8002812:	d0e7      	beq.n	80027e4 <_malloc_r+0x58>
 8002814:	425a      	negs	r2, r3
 8002816:	50e2      	str	r2, [r4, r3]
 8002818:	e7e4      	b.n	80027e4 <_malloc_r+0x58>
 800281a:	6063      	str	r3, [r4, #4]
 800281c:	000c      	movs	r4, r1
 800281e:	e7ef      	b.n	8002800 <_malloc_r+0x74>
 8002820:	000c      	movs	r4, r1
 8002822:	6849      	ldr	r1, [r1, #4]
 8002824:	e7c3      	b.n	80027ae <_malloc_r+0x22>
 8002826:	2303      	movs	r3, #3
 8002828:	1cc4      	adds	r4, r0, #3
 800282a:	439c      	bics	r4, r3
 800282c:	42a0      	cmp	r0, r4
 800282e:	d0e1      	beq.n	80027f4 <_malloc_r+0x68>
 8002830:	1a21      	subs	r1, r4, r0
 8002832:	0030      	movs	r0, r6
 8002834:	f000 fabc 	bl	8002db0 <_sbrk_r>
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	d1db      	bne.n	80027f4 <_malloc_r+0x68>
 800283c:	e7c7      	b.n	80027ce <_malloc_r+0x42>
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	200001d8 	.word	0x200001d8
 8002844:	200001dc 	.word	0x200001dc

08002848 <__sfputc_r>:
 8002848:	6893      	ldr	r3, [r2, #8]
 800284a:	b510      	push	{r4, lr}
 800284c:	3b01      	subs	r3, #1
 800284e:	6093      	str	r3, [r2, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	da04      	bge.n	800285e <__sfputc_r+0x16>
 8002854:	6994      	ldr	r4, [r2, #24]
 8002856:	42a3      	cmp	r3, r4
 8002858:	db07      	blt.n	800286a <__sfputc_r+0x22>
 800285a:	290a      	cmp	r1, #10
 800285c:	d005      	beq.n	800286a <__sfputc_r+0x22>
 800285e:	6813      	ldr	r3, [r2, #0]
 8002860:	1c58      	adds	r0, r3, #1
 8002862:	6010      	str	r0, [r2, #0]
 8002864:	7019      	strb	r1, [r3, #0]
 8002866:	0008      	movs	r0, r1
 8002868:	bd10      	pop	{r4, pc}
 800286a:	f000 faff 	bl	8002e6c <__swbuf_r>
 800286e:	0001      	movs	r1, r0
 8002870:	e7f9      	b.n	8002866 <__sfputc_r+0x1e>

08002872 <__sfputs_r>:
 8002872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002874:	0006      	movs	r6, r0
 8002876:	000f      	movs	r7, r1
 8002878:	0014      	movs	r4, r2
 800287a:	18d5      	adds	r5, r2, r3
 800287c:	42ac      	cmp	r4, r5
 800287e:	d101      	bne.n	8002884 <__sfputs_r+0x12>
 8002880:	2000      	movs	r0, #0
 8002882:	e007      	b.n	8002894 <__sfputs_r+0x22>
 8002884:	7821      	ldrb	r1, [r4, #0]
 8002886:	003a      	movs	r2, r7
 8002888:	0030      	movs	r0, r6
 800288a:	f7ff ffdd 	bl	8002848 <__sfputc_r>
 800288e:	3401      	adds	r4, #1
 8002890:	1c43      	adds	r3, r0, #1
 8002892:	d1f3      	bne.n	800287c <__sfputs_r+0xa>
 8002894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002898 <_vfiprintf_r>:
 8002898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800289a:	b0a1      	sub	sp, #132	; 0x84
 800289c:	9003      	str	r0, [sp, #12]
 800289e:	000f      	movs	r7, r1
 80028a0:	0016      	movs	r6, r2
 80028a2:	001d      	movs	r5, r3
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d005      	beq.n	80028b4 <_vfiprintf_r+0x1c>
 80028a8:	6983      	ldr	r3, [r0, #24]
 80028aa:	9305      	str	r3, [sp, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <_vfiprintf_r+0x1c>
 80028b0:	f7ff fed8 	bl	8002664 <__sinit>
 80028b4:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <_vfiprintf_r+0x20c>)
 80028b6:	429f      	cmp	r7, r3
 80028b8:	d15c      	bne.n	8002974 <_vfiprintf_r+0xdc>
 80028ba:	9b03      	ldr	r3, [sp, #12]
 80028bc:	685f      	ldr	r7, [r3, #4]
 80028be:	89bb      	ldrh	r3, [r7, #12]
 80028c0:	071b      	lsls	r3, r3, #28
 80028c2:	d563      	bpl.n	800298c <_vfiprintf_r+0xf4>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d060      	beq.n	800298c <_vfiprintf_r+0xf4>
 80028ca:	2300      	movs	r3, #0
 80028cc:	ac08      	add	r4, sp, #32
 80028ce:	6163      	str	r3, [r4, #20]
 80028d0:	3320      	adds	r3, #32
 80028d2:	7663      	strb	r3, [r4, #25]
 80028d4:	3310      	adds	r3, #16
 80028d6:	76a3      	strb	r3, [r4, #26]
 80028d8:	9507      	str	r5, [sp, #28]
 80028da:	0035      	movs	r5, r6
 80028dc:	782b      	ldrb	r3, [r5, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <_vfiprintf_r+0x4e>
 80028e2:	2b25      	cmp	r3, #37	; 0x25
 80028e4:	d15c      	bne.n	80029a0 <_vfiprintf_r+0x108>
 80028e6:	1bab      	subs	r3, r5, r6
 80028e8:	9305      	str	r3, [sp, #20]
 80028ea:	d00c      	beq.n	8002906 <_vfiprintf_r+0x6e>
 80028ec:	0032      	movs	r2, r6
 80028ee:	0039      	movs	r1, r7
 80028f0:	9803      	ldr	r0, [sp, #12]
 80028f2:	f7ff ffbe 	bl	8002872 <__sfputs_r>
 80028f6:	1c43      	adds	r3, r0, #1
 80028f8:	d100      	bne.n	80028fc <_vfiprintf_r+0x64>
 80028fa:	e0c4      	b.n	8002a86 <_vfiprintf_r+0x1ee>
 80028fc:	6962      	ldr	r2, [r4, #20]
 80028fe:	9b05      	ldr	r3, [sp, #20]
 8002900:	4694      	mov	ip, r2
 8002902:	4463      	add	r3, ip
 8002904:	6163      	str	r3, [r4, #20]
 8002906:	782b      	ldrb	r3, [r5, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d100      	bne.n	800290e <_vfiprintf_r+0x76>
 800290c:	e0bb      	b.n	8002a86 <_vfiprintf_r+0x1ee>
 800290e:	2201      	movs	r2, #1
 8002910:	2300      	movs	r3, #0
 8002912:	4252      	negs	r2, r2
 8002914:	6062      	str	r2, [r4, #4]
 8002916:	a904      	add	r1, sp, #16
 8002918:	3254      	adds	r2, #84	; 0x54
 800291a:	1852      	adds	r2, r2, r1
 800291c:	1c6e      	adds	r6, r5, #1
 800291e:	6023      	str	r3, [r4, #0]
 8002920:	60e3      	str	r3, [r4, #12]
 8002922:	60a3      	str	r3, [r4, #8]
 8002924:	7013      	strb	r3, [r2, #0]
 8002926:	65a3      	str	r3, [r4, #88]	; 0x58
 8002928:	7831      	ldrb	r1, [r6, #0]
 800292a:	2205      	movs	r2, #5
 800292c:	485e      	ldr	r0, [pc, #376]	; (8002aa8 <_vfiprintf_r+0x210>)
 800292e:	f000 fcc5 	bl	80032bc <memchr>
 8002932:	1c75      	adds	r5, r6, #1
 8002934:	2800      	cmp	r0, #0
 8002936:	d135      	bne.n	80029a4 <_vfiprintf_r+0x10c>
 8002938:	6822      	ldr	r2, [r4, #0]
 800293a:	06d3      	lsls	r3, r2, #27
 800293c:	d504      	bpl.n	8002948 <_vfiprintf_r+0xb0>
 800293e:	2353      	movs	r3, #83	; 0x53
 8002940:	a904      	add	r1, sp, #16
 8002942:	185b      	adds	r3, r3, r1
 8002944:	2120      	movs	r1, #32
 8002946:	7019      	strb	r1, [r3, #0]
 8002948:	0713      	lsls	r3, r2, #28
 800294a:	d504      	bpl.n	8002956 <_vfiprintf_r+0xbe>
 800294c:	2353      	movs	r3, #83	; 0x53
 800294e:	a904      	add	r1, sp, #16
 8002950:	185b      	adds	r3, r3, r1
 8002952:	212b      	movs	r1, #43	; 0x2b
 8002954:	7019      	strb	r1, [r3, #0]
 8002956:	7833      	ldrb	r3, [r6, #0]
 8002958:	2b2a      	cmp	r3, #42	; 0x2a
 800295a:	d02c      	beq.n	80029b6 <_vfiprintf_r+0x11e>
 800295c:	0035      	movs	r5, r6
 800295e:	2100      	movs	r1, #0
 8002960:	200a      	movs	r0, #10
 8002962:	68e3      	ldr	r3, [r4, #12]
 8002964:	782a      	ldrb	r2, [r5, #0]
 8002966:	1c6e      	adds	r6, r5, #1
 8002968:	3a30      	subs	r2, #48	; 0x30
 800296a:	2a09      	cmp	r2, #9
 800296c:	d964      	bls.n	8002a38 <_vfiprintf_r+0x1a0>
 800296e:	2900      	cmp	r1, #0
 8002970:	d02e      	beq.n	80029d0 <_vfiprintf_r+0x138>
 8002972:	e026      	b.n	80029c2 <_vfiprintf_r+0x12a>
 8002974:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <_vfiprintf_r+0x214>)
 8002976:	429f      	cmp	r7, r3
 8002978:	d102      	bne.n	8002980 <_vfiprintf_r+0xe8>
 800297a:	9b03      	ldr	r3, [sp, #12]
 800297c:	689f      	ldr	r7, [r3, #8]
 800297e:	e79e      	b.n	80028be <_vfiprintf_r+0x26>
 8002980:	4b4b      	ldr	r3, [pc, #300]	; (8002ab0 <_vfiprintf_r+0x218>)
 8002982:	429f      	cmp	r7, r3
 8002984:	d19b      	bne.n	80028be <_vfiprintf_r+0x26>
 8002986:	9b03      	ldr	r3, [sp, #12]
 8002988:	68df      	ldr	r7, [r3, #12]
 800298a:	e798      	b.n	80028be <_vfiprintf_r+0x26>
 800298c:	0039      	movs	r1, r7
 800298e:	9803      	ldr	r0, [sp, #12]
 8002990:	f000 fad6 	bl	8002f40 <__swsetup_r>
 8002994:	2800      	cmp	r0, #0
 8002996:	d098      	beq.n	80028ca <_vfiprintf_r+0x32>
 8002998:	2001      	movs	r0, #1
 800299a:	4240      	negs	r0, r0
 800299c:	b021      	add	sp, #132	; 0x84
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a0:	3501      	adds	r5, #1
 80029a2:	e79b      	b.n	80028dc <_vfiprintf_r+0x44>
 80029a4:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <_vfiprintf_r+0x210>)
 80029a6:	6822      	ldr	r2, [r4, #0]
 80029a8:	1ac0      	subs	r0, r0, r3
 80029aa:	2301      	movs	r3, #1
 80029ac:	4083      	lsls	r3, r0
 80029ae:	4313      	orrs	r3, r2
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	002e      	movs	r6, r5
 80029b4:	e7b8      	b.n	8002928 <_vfiprintf_r+0x90>
 80029b6:	9b07      	ldr	r3, [sp, #28]
 80029b8:	1d19      	adds	r1, r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	9107      	str	r1, [sp, #28]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db01      	blt.n	80029c6 <_vfiprintf_r+0x12e>
 80029c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80029c4:	e004      	b.n	80029d0 <_vfiprintf_r+0x138>
 80029c6:	425b      	negs	r3, r3
 80029c8:	60e3      	str	r3, [r4, #12]
 80029ca:	2302      	movs	r3, #2
 80029cc:	4313      	orrs	r3, r2
 80029ce:	6023      	str	r3, [r4, #0]
 80029d0:	782b      	ldrb	r3, [r5, #0]
 80029d2:	2b2e      	cmp	r3, #46	; 0x2e
 80029d4:	d10a      	bne.n	80029ec <_vfiprintf_r+0x154>
 80029d6:	786b      	ldrb	r3, [r5, #1]
 80029d8:	2b2a      	cmp	r3, #42	; 0x2a
 80029da:	d135      	bne.n	8002a48 <_vfiprintf_r+0x1b0>
 80029dc:	9b07      	ldr	r3, [sp, #28]
 80029de:	3502      	adds	r5, #2
 80029e0:	1d1a      	adds	r2, r3, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	9207      	str	r2, [sp, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db2b      	blt.n	8002a42 <_vfiprintf_r+0x1aa>
 80029ea:	9309      	str	r3, [sp, #36]	; 0x24
 80029ec:	4e31      	ldr	r6, [pc, #196]	; (8002ab4 <_vfiprintf_r+0x21c>)
 80029ee:	7829      	ldrb	r1, [r5, #0]
 80029f0:	2203      	movs	r2, #3
 80029f2:	0030      	movs	r0, r6
 80029f4:	f000 fc62 	bl	80032bc <memchr>
 80029f8:	2800      	cmp	r0, #0
 80029fa:	d006      	beq.n	8002a0a <_vfiprintf_r+0x172>
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	1b80      	subs	r0, r0, r6
 8002a00:	4083      	lsls	r3, r0
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	3501      	adds	r5, #1
 8002a06:	4313      	orrs	r3, r2
 8002a08:	6023      	str	r3, [r4, #0]
 8002a0a:	7829      	ldrb	r1, [r5, #0]
 8002a0c:	2206      	movs	r2, #6
 8002a0e:	482a      	ldr	r0, [pc, #168]	; (8002ab8 <_vfiprintf_r+0x220>)
 8002a10:	1c6e      	adds	r6, r5, #1
 8002a12:	7621      	strb	r1, [r4, #24]
 8002a14:	f000 fc52 	bl	80032bc <memchr>
 8002a18:	2800      	cmp	r0, #0
 8002a1a:	d03a      	beq.n	8002a92 <_vfiprintf_r+0x1fa>
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <_vfiprintf_r+0x224>)
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d125      	bne.n	8002a6e <_vfiprintf_r+0x1d6>
 8002a22:	2207      	movs	r2, #7
 8002a24:	9b07      	ldr	r3, [sp, #28]
 8002a26:	3307      	adds	r3, #7
 8002a28:	4393      	bics	r3, r2
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	9307      	str	r3, [sp, #28]
 8002a2e:	6963      	ldr	r3, [r4, #20]
 8002a30:	9a04      	ldr	r2, [sp, #16]
 8002a32:	189b      	adds	r3, r3, r2
 8002a34:	6163      	str	r3, [r4, #20]
 8002a36:	e750      	b.n	80028da <_vfiprintf_r+0x42>
 8002a38:	4343      	muls	r3, r0
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	0035      	movs	r5, r6
 8002a40:	e790      	b.n	8002964 <_vfiprintf_r+0xcc>
 8002a42:	2301      	movs	r3, #1
 8002a44:	425b      	negs	r3, r3
 8002a46:	e7d0      	b.n	80029ea <_vfiprintf_r+0x152>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	200a      	movs	r0, #10
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	3501      	adds	r5, #1
 8002a50:	6063      	str	r3, [r4, #4]
 8002a52:	7829      	ldrb	r1, [r5, #0]
 8002a54:	1c6e      	adds	r6, r5, #1
 8002a56:	3930      	subs	r1, #48	; 0x30
 8002a58:	2909      	cmp	r1, #9
 8002a5a:	d903      	bls.n	8002a64 <_vfiprintf_r+0x1cc>
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0c5      	beq.n	80029ec <_vfiprintf_r+0x154>
 8002a60:	9209      	str	r2, [sp, #36]	; 0x24
 8002a62:	e7c3      	b.n	80029ec <_vfiprintf_r+0x154>
 8002a64:	4342      	muls	r2, r0
 8002a66:	2301      	movs	r3, #1
 8002a68:	1852      	adds	r2, r2, r1
 8002a6a:	0035      	movs	r5, r6
 8002a6c:	e7f1      	b.n	8002a52 <_vfiprintf_r+0x1ba>
 8002a6e:	ab07      	add	r3, sp, #28
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	003a      	movs	r2, r7
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <_vfiprintf_r+0x228>)
 8002a76:	0021      	movs	r1, r4
 8002a78:	9803      	ldr	r0, [sp, #12]
 8002a7a:	e000      	b.n	8002a7e <_vfiprintf_r+0x1e6>
 8002a7c:	bf00      	nop
 8002a7e:	9004      	str	r0, [sp, #16]
 8002a80:	9b04      	ldr	r3, [sp, #16]
 8002a82:	3301      	adds	r3, #1
 8002a84:	d1d3      	bne.n	8002a2e <_vfiprintf_r+0x196>
 8002a86:	89bb      	ldrh	r3, [r7, #12]
 8002a88:	065b      	lsls	r3, r3, #25
 8002a8a:	d500      	bpl.n	8002a8e <_vfiprintf_r+0x1f6>
 8002a8c:	e784      	b.n	8002998 <_vfiprintf_r+0x100>
 8002a8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a90:	e784      	b.n	800299c <_vfiprintf_r+0x104>
 8002a92:	ab07      	add	r3, sp, #28
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	003a      	movs	r2, r7
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <_vfiprintf_r+0x228>)
 8002a9a:	0021      	movs	r1, r4
 8002a9c:	9803      	ldr	r0, [sp, #12]
 8002a9e:	f000 f87f 	bl	8002ba0 <_printf_i>
 8002aa2:	e7ec      	b.n	8002a7e <_vfiprintf_r+0x1e6>
 8002aa4:	08003460 	.word	0x08003460
 8002aa8:	080034a0 	.word	0x080034a0
 8002aac:	08003480 	.word	0x08003480
 8002ab0:	08003440 	.word	0x08003440
 8002ab4:	080034a6 	.word	0x080034a6
 8002ab8:	080034aa 	.word	0x080034aa
 8002abc:	00000000 	.word	0x00000000
 8002ac0:	08002873 	.word	0x08002873

08002ac4 <_printf_common>:
 8002ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ac6:	0015      	movs	r5, r2
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	688a      	ldr	r2, [r1, #8]
 8002acc:	690b      	ldr	r3, [r1, #16]
 8002ace:	9000      	str	r0, [sp, #0]
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	da00      	bge.n	8002ad8 <_printf_common+0x14>
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	0022      	movs	r2, r4
 8002ada:	602b      	str	r3, [r5, #0]
 8002adc:	3243      	adds	r2, #67	; 0x43
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	d001      	beq.n	8002ae8 <_printf_common+0x24>
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	602b      	str	r3, [r5, #0]
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	069b      	lsls	r3, r3, #26
 8002aec:	d502      	bpl.n	8002af4 <_printf_common+0x30>
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	3302      	adds	r3, #2
 8002af2:	602b      	str	r3, [r5, #0]
 8002af4:	2706      	movs	r7, #6
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	401f      	ands	r7, r3
 8002afa:	d027      	beq.n	8002b4c <_printf_common+0x88>
 8002afc:	0023      	movs	r3, r4
 8002afe:	3343      	adds	r3, #67	; 0x43
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	1e5a      	subs	r2, r3, #1
 8002b04:	4193      	sbcs	r3, r2
 8002b06:	6822      	ldr	r2, [r4, #0]
 8002b08:	0692      	lsls	r2, r2, #26
 8002b0a:	d430      	bmi.n	8002b6e <_printf_common+0xaa>
 8002b0c:	0022      	movs	r2, r4
 8002b0e:	9901      	ldr	r1, [sp, #4]
 8002b10:	3243      	adds	r2, #67	; 0x43
 8002b12:	9800      	ldr	r0, [sp, #0]
 8002b14:	9e08      	ldr	r6, [sp, #32]
 8002b16:	47b0      	blx	r6
 8002b18:	1c43      	adds	r3, r0, #1
 8002b1a:	d025      	beq.n	8002b68 <_printf_common+0xa4>
 8002b1c:	2306      	movs	r3, #6
 8002b1e:	6820      	ldr	r0, [r4, #0]
 8002b20:	682a      	ldr	r2, [r5, #0]
 8002b22:	68e1      	ldr	r1, [r4, #12]
 8002b24:	4003      	ands	r3, r0
 8002b26:	2500      	movs	r5, #0
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d103      	bne.n	8002b34 <_printf_common+0x70>
 8002b2c:	1a8d      	subs	r5, r1, r2
 8002b2e:	43eb      	mvns	r3, r5
 8002b30:	17db      	asrs	r3, r3, #31
 8002b32:	401d      	ands	r5, r3
 8002b34:	68a3      	ldr	r3, [r4, #8]
 8002b36:	6922      	ldr	r2, [r4, #16]
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	dd01      	ble.n	8002b40 <_printf_common+0x7c>
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	18ed      	adds	r5, r5, r3
 8002b40:	2700      	movs	r7, #0
 8002b42:	42bd      	cmp	r5, r7
 8002b44:	d120      	bne.n	8002b88 <_printf_common+0xc4>
 8002b46:	2000      	movs	r0, #0
 8002b48:	e010      	b.n	8002b6c <_printf_common+0xa8>
 8002b4a:	3701      	adds	r7, #1
 8002b4c:	68e3      	ldr	r3, [r4, #12]
 8002b4e:	682a      	ldr	r2, [r5, #0]
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	42bb      	cmp	r3, r7
 8002b54:	ddd2      	ble.n	8002afc <_printf_common+0x38>
 8002b56:	0022      	movs	r2, r4
 8002b58:	2301      	movs	r3, #1
 8002b5a:	3219      	adds	r2, #25
 8002b5c:	9901      	ldr	r1, [sp, #4]
 8002b5e:	9800      	ldr	r0, [sp, #0]
 8002b60:	9e08      	ldr	r6, [sp, #32]
 8002b62:	47b0      	blx	r6
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	d1f0      	bne.n	8002b4a <_printf_common+0x86>
 8002b68:	2001      	movs	r0, #1
 8002b6a:	4240      	negs	r0, r0
 8002b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b6e:	2030      	movs	r0, #48	; 0x30
 8002b70:	18e1      	adds	r1, r4, r3
 8002b72:	3143      	adds	r1, #67	; 0x43
 8002b74:	7008      	strb	r0, [r1, #0]
 8002b76:	0021      	movs	r1, r4
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	3145      	adds	r1, #69	; 0x45
 8002b7c:	7809      	ldrb	r1, [r1, #0]
 8002b7e:	18a2      	adds	r2, r4, r2
 8002b80:	3243      	adds	r2, #67	; 0x43
 8002b82:	3302      	adds	r3, #2
 8002b84:	7011      	strb	r1, [r2, #0]
 8002b86:	e7c1      	b.n	8002b0c <_printf_common+0x48>
 8002b88:	0022      	movs	r2, r4
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	321a      	adds	r2, #26
 8002b8e:	9901      	ldr	r1, [sp, #4]
 8002b90:	9800      	ldr	r0, [sp, #0]
 8002b92:	9e08      	ldr	r6, [sp, #32]
 8002b94:	47b0      	blx	r6
 8002b96:	1c43      	adds	r3, r0, #1
 8002b98:	d0e6      	beq.n	8002b68 <_printf_common+0xa4>
 8002b9a:	3701      	adds	r7, #1
 8002b9c:	e7d1      	b.n	8002b42 <_printf_common+0x7e>
	...

08002ba0 <_printf_i>:
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	9204      	str	r2, [sp, #16]
 8002ba6:	000a      	movs	r2, r1
 8002ba8:	3243      	adds	r2, #67	; 0x43
 8002baa:	9305      	str	r3, [sp, #20]
 8002bac:	9003      	str	r0, [sp, #12]
 8002bae:	9202      	str	r2, [sp, #8]
 8002bb0:	7e0a      	ldrb	r2, [r1, #24]
 8002bb2:	000c      	movs	r4, r1
 8002bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bb6:	2a6e      	cmp	r2, #110	; 0x6e
 8002bb8:	d100      	bne.n	8002bbc <_printf_i+0x1c>
 8002bba:	e086      	b.n	8002cca <_printf_i+0x12a>
 8002bbc:	d81f      	bhi.n	8002bfe <_printf_i+0x5e>
 8002bbe:	2a63      	cmp	r2, #99	; 0x63
 8002bc0:	d033      	beq.n	8002c2a <_printf_i+0x8a>
 8002bc2:	d808      	bhi.n	8002bd6 <_printf_i+0x36>
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	d100      	bne.n	8002bca <_printf_i+0x2a>
 8002bc8:	e08c      	b.n	8002ce4 <_printf_i+0x144>
 8002bca:	2a58      	cmp	r2, #88	; 0x58
 8002bcc:	d04d      	beq.n	8002c6a <_printf_i+0xca>
 8002bce:	0025      	movs	r5, r4
 8002bd0:	3542      	adds	r5, #66	; 0x42
 8002bd2:	702a      	strb	r2, [r5, #0]
 8002bd4:	e030      	b.n	8002c38 <_printf_i+0x98>
 8002bd6:	2a64      	cmp	r2, #100	; 0x64
 8002bd8:	d001      	beq.n	8002bde <_printf_i+0x3e>
 8002bda:	2a69      	cmp	r2, #105	; 0x69
 8002bdc:	d1f7      	bne.n	8002bce <_printf_i+0x2e>
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	6825      	ldr	r5, [r4, #0]
 8002be2:	1d0a      	adds	r2, r1, #4
 8002be4:	0628      	lsls	r0, r5, #24
 8002be6:	d529      	bpl.n	8002c3c <_printf_i+0x9c>
 8002be8:	6808      	ldr	r0, [r1, #0]
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	2800      	cmp	r0, #0
 8002bee:	da03      	bge.n	8002bf8 <_printf_i+0x58>
 8002bf0:	232d      	movs	r3, #45	; 0x2d
 8002bf2:	9a02      	ldr	r2, [sp, #8]
 8002bf4:	4240      	negs	r0, r0
 8002bf6:	7013      	strb	r3, [r2, #0]
 8002bf8:	4e6b      	ldr	r6, [pc, #428]	; (8002da8 <_printf_i+0x208>)
 8002bfa:	270a      	movs	r7, #10
 8002bfc:	e04f      	b.n	8002c9e <_printf_i+0xfe>
 8002bfe:	2a73      	cmp	r2, #115	; 0x73
 8002c00:	d074      	beq.n	8002cec <_printf_i+0x14c>
 8002c02:	d808      	bhi.n	8002c16 <_printf_i+0x76>
 8002c04:	2a6f      	cmp	r2, #111	; 0x6f
 8002c06:	d01f      	beq.n	8002c48 <_printf_i+0xa8>
 8002c08:	2a70      	cmp	r2, #112	; 0x70
 8002c0a:	d1e0      	bne.n	8002bce <_printf_i+0x2e>
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	6809      	ldr	r1, [r1, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	6022      	str	r2, [r4, #0]
 8002c14:	e003      	b.n	8002c1e <_printf_i+0x7e>
 8002c16:	2a75      	cmp	r2, #117	; 0x75
 8002c18:	d016      	beq.n	8002c48 <_printf_i+0xa8>
 8002c1a:	2a78      	cmp	r2, #120	; 0x78
 8002c1c:	d1d7      	bne.n	8002bce <_printf_i+0x2e>
 8002c1e:	0022      	movs	r2, r4
 8002c20:	2178      	movs	r1, #120	; 0x78
 8002c22:	3245      	adds	r2, #69	; 0x45
 8002c24:	7011      	strb	r1, [r2, #0]
 8002c26:	4e61      	ldr	r6, [pc, #388]	; (8002dac <_printf_i+0x20c>)
 8002c28:	e022      	b.n	8002c70 <_printf_i+0xd0>
 8002c2a:	0025      	movs	r5, r4
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	3542      	adds	r5, #66	; 0x42
 8002c30:	1d11      	adds	r1, r2, #4
 8002c32:	6019      	str	r1, [r3, #0]
 8002c34:	6813      	ldr	r3, [r2, #0]
 8002c36:	702b      	strb	r3, [r5, #0]
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e065      	b.n	8002d08 <_printf_i+0x168>
 8002c3c:	6808      	ldr	r0, [r1, #0]
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	0669      	lsls	r1, r5, #25
 8002c42:	d5d3      	bpl.n	8002bec <_printf_i+0x4c>
 8002c44:	b200      	sxth	r0, r0
 8002c46:	e7d1      	b.n	8002bec <_printf_i+0x4c>
 8002c48:	6819      	ldr	r1, [r3, #0]
 8002c4a:	6825      	ldr	r5, [r4, #0]
 8002c4c:	1d08      	adds	r0, r1, #4
 8002c4e:	6018      	str	r0, [r3, #0]
 8002c50:	6808      	ldr	r0, [r1, #0]
 8002c52:	062e      	lsls	r6, r5, #24
 8002c54:	d505      	bpl.n	8002c62 <_printf_i+0xc2>
 8002c56:	4e54      	ldr	r6, [pc, #336]	; (8002da8 <_printf_i+0x208>)
 8002c58:	2708      	movs	r7, #8
 8002c5a:	2a6f      	cmp	r2, #111	; 0x6f
 8002c5c:	d01b      	beq.n	8002c96 <_printf_i+0xf6>
 8002c5e:	270a      	movs	r7, #10
 8002c60:	e019      	b.n	8002c96 <_printf_i+0xf6>
 8002c62:	066d      	lsls	r5, r5, #25
 8002c64:	d5f7      	bpl.n	8002c56 <_printf_i+0xb6>
 8002c66:	b280      	uxth	r0, r0
 8002c68:	e7f5      	b.n	8002c56 <_printf_i+0xb6>
 8002c6a:	3145      	adds	r1, #69	; 0x45
 8002c6c:	4e4e      	ldr	r6, [pc, #312]	; (8002da8 <_printf_i+0x208>)
 8002c6e:	700a      	strb	r2, [r1, #0]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	6822      	ldr	r2, [r4, #0]
 8002c74:	1d01      	adds	r1, r0, #4
 8002c76:	6800      	ldr	r0, [r0, #0]
 8002c78:	6019      	str	r1, [r3, #0]
 8002c7a:	0615      	lsls	r5, r2, #24
 8002c7c:	d521      	bpl.n	8002cc2 <_printf_i+0x122>
 8002c7e:	07d3      	lsls	r3, r2, #31
 8002c80:	d502      	bpl.n	8002c88 <_printf_i+0xe8>
 8002c82:	2320      	movs	r3, #32
 8002c84:	431a      	orrs	r2, r3
 8002c86:	6022      	str	r2, [r4, #0]
 8002c88:	2710      	movs	r7, #16
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	d103      	bne.n	8002c96 <_printf_i+0xf6>
 8002c8e:	2320      	movs	r3, #32
 8002c90:	6822      	ldr	r2, [r4, #0]
 8002c92:	439a      	bics	r2, r3
 8002c94:	6022      	str	r2, [r4, #0]
 8002c96:	0023      	movs	r3, r4
 8002c98:	2200      	movs	r2, #0
 8002c9a:	3343      	adds	r3, #67	; 0x43
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	6863      	ldr	r3, [r4, #4]
 8002ca0:	60a3      	str	r3, [r4, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	db58      	blt.n	8002d58 <_printf_i+0x1b8>
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	6821      	ldr	r1, [r4, #0]
 8002caa:	4391      	bics	r1, r2
 8002cac:	6021      	str	r1, [r4, #0]
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d154      	bne.n	8002d5c <_printf_i+0x1bc>
 8002cb2:	9d02      	ldr	r5, [sp, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05a      	beq.n	8002d6e <_printf_i+0x1ce>
 8002cb8:	0025      	movs	r5, r4
 8002cba:	7833      	ldrb	r3, [r6, #0]
 8002cbc:	3542      	adds	r5, #66	; 0x42
 8002cbe:	702b      	strb	r3, [r5, #0]
 8002cc0:	e055      	b.n	8002d6e <_printf_i+0x1ce>
 8002cc2:	0655      	lsls	r5, r2, #25
 8002cc4:	d5db      	bpl.n	8002c7e <_printf_i+0xde>
 8002cc6:	b280      	uxth	r0, r0
 8002cc8:	e7d9      	b.n	8002c7e <_printf_i+0xde>
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	680d      	ldr	r5, [r1, #0]
 8002cce:	1d10      	adds	r0, r2, #4
 8002cd0:	6949      	ldr	r1, [r1, #20]
 8002cd2:	6018      	str	r0, [r3, #0]
 8002cd4:	6813      	ldr	r3, [r2, #0]
 8002cd6:	062e      	lsls	r6, r5, #24
 8002cd8:	d501      	bpl.n	8002cde <_printf_i+0x13e>
 8002cda:	6019      	str	r1, [r3, #0]
 8002cdc:	e002      	b.n	8002ce4 <_printf_i+0x144>
 8002cde:	066d      	lsls	r5, r5, #25
 8002ce0:	d5fb      	bpl.n	8002cda <_printf_i+0x13a>
 8002ce2:	8019      	strh	r1, [r3, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9d02      	ldr	r5, [sp, #8]
 8002ce8:	6123      	str	r3, [r4, #16]
 8002cea:	e04f      	b.n	8002d8c <_printf_i+0x1ec>
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	1d11      	adds	r1, r2, #4
 8002cf0:	6019      	str	r1, [r3, #0]
 8002cf2:	6815      	ldr	r5, [r2, #0]
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	6862      	ldr	r2, [r4, #4]
 8002cf8:	0028      	movs	r0, r5
 8002cfa:	f000 fadf 	bl	80032bc <memchr>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d001      	beq.n	8002d06 <_printf_i+0x166>
 8002d02:	1b40      	subs	r0, r0, r5
 8002d04:	6060      	str	r0, [r4, #4]
 8002d06:	6863      	ldr	r3, [r4, #4]
 8002d08:	6123      	str	r3, [r4, #16]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9a02      	ldr	r2, [sp, #8]
 8002d0e:	7013      	strb	r3, [r2, #0]
 8002d10:	e03c      	b.n	8002d8c <_printf_i+0x1ec>
 8002d12:	6923      	ldr	r3, [r4, #16]
 8002d14:	002a      	movs	r2, r5
 8002d16:	9904      	ldr	r1, [sp, #16]
 8002d18:	9803      	ldr	r0, [sp, #12]
 8002d1a:	9d05      	ldr	r5, [sp, #20]
 8002d1c:	47a8      	blx	r5
 8002d1e:	1c43      	adds	r3, r0, #1
 8002d20:	d03e      	beq.n	8002da0 <_printf_i+0x200>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	079b      	lsls	r3, r3, #30
 8002d26:	d415      	bmi.n	8002d54 <_printf_i+0x1b4>
 8002d28:	9b07      	ldr	r3, [sp, #28]
 8002d2a:	68e0      	ldr	r0, [r4, #12]
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	da39      	bge.n	8002da4 <_printf_i+0x204>
 8002d30:	0018      	movs	r0, r3
 8002d32:	e037      	b.n	8002da4 <_printf_i+0x204>
 8002d34:	0022      	movs	r2, r4
 8002d36:	2301      	movs	r3, #1
 8002d38:	3219      	adds	r2, #25
 8002d3a:	9904      	ldr	r1, [sp, #16]
 8002d3c:	9803      	ldr	r0, [sp, #12]
 8002d3e:	9e05      	ldr	r6, [sp, #20]
 8002d40:	47b0      	blx	r6
 8002d42:	1c43      	adds	r3, r0, #1
 8002d44:	d02c      	beq.n	8002da0 <_printf_i+0x200>
 8002d46:	3501      	adds	r5, #1
 8002d48:	68e3      	ldr	r3, [r4, #12]
 8002d4a:	9a07      	ldr	r2, [sp, #28]
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	42ab      	cmp	r3, r5
 8002d50:	dcf0      	bgt.n	8002d34 <_printf_i+0x194>
 8002d52:	e7e9      	b.n	8002d28 <_printf_i+0x188>
 8002d54:	2500      	movs	r5, #0
 8002d56:	e7f7      	b.n	8002d48 <_printf_i+0x1a8>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d0ad      	beq.n	8002cb8 <_printf_i+0x118>
 8002d5c:	9d02      	ldr	r5, [sp, #8]
 8002d5e:	0039      	movs	r1, r7
 8002d60:	f7fd fa58 	bl	8000214 <__aeabi_uidivmod>
 8002d64:	5c73      	ldrb	r3, [r6, r1]
 8002d66:	3d01      	subs	r5, #1
 8002d68:	702b      	strb	r3, [r5, #0]
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d1f7      	bne.n	8002d5e <_printf_i+0x1be>
 8002d6e:	2f08      	cmp	r7, #8
 8002d70:	d109      	bne.n	8002d86 <_printf_i+0x1e6>
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	07db      	lsls	r3, r3, #31
 8002d76:	d506      	bpl.n	8002d86 <_printf_i+0x1e6>
 8002d78:	6863      	ldr	r3, [r4, #4]
 8002d7a:	6922      	ldr	r2, [r4, #16]
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	dc02      	bgt.n	8002d86 <_printf_i+0x1e6>
 8002d80:	2330      	movs	r3, #48	; 0x30
 8002d82:	3d01      	subs	r5, #1
 8002d84:	702b      	strb	r3, [r5, #0]
 8002d86:	9b02      	ldr	r3, [sp, #8]
 8002d88:	1b5b      	subs	r3, r3, r5
 8002d8a:	6123      	str	r3, [r4, #16]
 8002d8c:	9b05      	ldr	r3, [sp, #20]
 8002d8e:	aa07      	add	r2, sp, #28
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	0021      	movs	r1, r4
 8002d94:	9b04      	ldr	r3, [sp, #16]
 8002d96:	9803      	ldr	r0, [sp, #12]
 8002d98:	f7ff fe94 	bl	8002ac4 <_printf_common>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d1b8      	bne.n	8002d12 <_printf_i+0x172>
 8002da0:	2001      	movs	r0, #1
 8002da2:	4240      	negs	r0, r0
 8002da4:	b009      	add	sp, #36	; 0x24
 8002da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da8:	080034b1 	.word	0x080034b1
 8002dac:	080034c2 	.word	0x080034c2

08002db0 <_sbrk_r>:
 8002db0:	2300      	movs	r3, #0
 8002db2:	b570      	push	{r4, r5, r6, lr}
 8002db4:	4c06      	ldr	r4, [pc, #24]	; (8002dd0 <_sbrk_r+0x20>)
 8002db6:	0005      	movs	r5, r0
 8002db8:	0008      	movs	r0, r1
 8002dba:	6023      	str	r3, [r4, #0]
 8002dbc:	f7fd fd32 	bl	8000824 <_sbrk>
 8002dc0:	1c43      	adds	r3, r0, #1
 8002dc2:	d103      	bne.n	8002dcc <_sbrk_r+0x1c>
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d000      	beq.n	8002dcc <_sbrk_r+0x1c>
 8002dca:	602b      	str	r3, [r5, #0]
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	200002ac 	.word	0x200002ac

08002dd4 <__sread>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	000c      	movs	r4, r1
 8002dd8:	250e      	movs	r5, #14
 8002dda:	5f49      	ldrsh	r1, [r1, r5]
 8002ddc:	f000 fac6 	bl	800336c <_read_r>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	db03      	blt.n	8002dec <__sread+0x18>
 8002de4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002de6:	181b      	adds	r3, r3, r0
 8002de8:	6563      	str	r3, [r4, #84]	; 0x54
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	89a3      	ldrh	r3, [r4, #12]
 8002dee:	4a02      	ldr	r2, [pc, #8]	; (8002df8 <__sread+0x24>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	81a3      	strh	r3, [r4, #12]
 8002df4:	e7f9      	b.n	8002dea <__sread+0x16>
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	ffffefff 	.word	0xffffefff

08002dfc <__swrite>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	001f      	movs	r7, r3
 8002e00:	898b      	ldrh	r3, [r1, #12]
 8002e02:	0005      	movs	r5, r0
 8002e04:	000c      	movs	r4, r1
 8002e06:	0016      	movs	r6, r2
 8002e08:	05db      	lsls	r3, r3, #23
 8002e0a:	d505      	bpl.n	8002e18 <__swrite+0x1c>
 8002e0c:	230e      	movs	r3, #14
 8002e0e:	5ec9      	ldrsh	r1, [r1, r3]
 8002e10:	2200      	movs	r2, #0
 8002e12:	2302      	movs	r3, #2
 8002e14:	f000 f9d2 	bl	80031bc <_lseek_r>
 8002e18:	89a3      	ldrh	r3, [r4, #12]
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <__swrite+0x34>)
 8002e1c:	0028      	movs	r0, r5
 8002e1e:	4013      	ands	r3, r2
 8002e20:	81a3      	strh	r3, [r4, #12]
 8002e22:	0032      	movs	r2, r6
 8002e24:	230e      	movs	r3, #14
 8002e26:	5ee1      	ldrsh	r1, [r4, r3]
 8002e28:	003b      	movs	r3, r7
 8002e2a:	f000 f875 	bl	8002f18 <_write_r>
 8002e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e30:	ffffefff 	.word	0xffffefff

08002e34 <__sseek>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	000c      	movs	r4, r1
 8002e38:	250e      	movs	r5, #14
 8002e3a:	5f49      	ldrsh	r1, [r1, r5]
 8002e3c:	f000 f9be 	bl	80031bc <_lseek_r>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	1c42      	adds	r2, r0, #1
 8002e44:	d103      	bne.n	8002e4e <__sseek+0x1a>
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <__sseek+0x28>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	2280      	movs	r2, #128	; 0x80
 8002e50:	0152      	lsls	r2, r2, #5
 8002e52:	4313      	orrs	r3, r2
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	6560      	str	r0, [r4, #84]	; 0x54
 8002e58:	e7f8      	b.n	8002e4c <__sseek+0x18>
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	ffffefff 	.word	0xffffefff

08002e60 <__sclose>:
 8002e60:	b510      	push	{r4, lr}
 8002e62:	230e      	movs	r3, #14
 8002e64:	5ec9      	ldrsh	r1, [r1, r3]
 8002e66:	f000 f8e1 	bl	800302c <_close_r>
 8002e6a:	bd10      	pop	{r4, pc}

08002e6c <__swbuf_r>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	0005      	movs	r5, r0
 8002e70:	000e      	movs	r6, r1
 8002e72:	0014      	movs	r4, r2
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d004      	beq.n	8002e82 <__swbuf_r+0x16>
 8002e78:	6983      	ldr	r3, [r0, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <__swbuf_r+0x16>
 8002e7e:	f7ff fbf1 	bl	8002664 <__sinit>
 8002e82:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <__swbuf_r+0xa0>)
 8002e84:	429c      	cmp	r4, r3
 8002e86:	d12d      	bne.n	8002ee4 <__swbuf_r+0x78>
 8002e88:	686c      	ldr	r4, [r5, #4]
 8002e8a:	69a3      	ldr	r3, [r4, #24]
 8002e8c:	60a3      	str	r3, [r4, #8]
 8002e8e:	89a3      	ldrh	r3, [r4, #12]
 8002e90:	071b      	lsls	r3, r3, #28
 8002e92:	d531      	bpl.n	8002ef8 <__swbuf_r+0x8c>
 8002e94:	6923      	ldr	r3, [r4, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d02e      	beq.n	8002ef8 <__swbuf_r+0x8c>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	6922      	ldr	r2, [r4, #16]
 8002e9e:	b2f7      	uxtb	r7, r6
 8002ea0:	1a98      	subs	r0, r3, r2
 8002ea2:	6963      	ldr	r3, [r4, #20]
 8002ea4:	b2f6      	uxtb	r6, r6
 8002ea6:	4283      	cmp	r3, r0
 8002ea8:	dc05      	bgt.n	8002eb6 <__swbuf_r+0x4a>
 8002eaa:	0021      	movs	r1, r4
 8002eac:	0028      	movs	r0, r5
 8002eae:	f000 f959 	bl	8003164 <_fflush_r>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d126      	bne.n	8002f04 <__swbuf_r+0x98>
 8002eb6:	68a3      	ldr	r3, [r4, #8]
 8002eb8:	3001      	adds	r0, #1
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60a3      	str	r3, [r4, #8]
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	6022      	str	r2, [r4, #0]
 8002ec4:	701f      	strb	r7, [r3, #0]
 8002ec6:	6963      	ldr	r3, [r4, #20]
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	d004      	beq.n	8002ed6 <__swbuf_r+0x6a>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	07db      	lsls	r3, r3, #31
 8002ed0:	d51a      	bpl.n	8002f08 <__swbuf_r+0x9c>
 8002ed2:	2e0a      	cmp	r6, #10
 8002ed4:	d118      	bne.n	8002f08 <__swbuf_r+0x9c>
 8002ed6:	0021      	movs	r1, r4
 8002ed8:	0028      	movs	r0, r5
 8002eda:	f000 f943 	bl	8003164 <_fflush_r>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d012      	beq.n	8002f08 <__swbuf_r+0x9c>
 8002ee2:	e00f      	b.n	8002f04 <__swbuf_r+0x98>
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <__swbuf_r+0xa4>)
 8002ee6:	429c      	cmp	r4, r3
 8002ee8:	d101      	bne.n	8002eee <__swbuf_r+0x82>
 8002eea:	68ac      	ldr	r4, [r5, #8]
 8002eec:	e7cd      	b.n	8002e8a <__swbuf_r+0x1e>
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <__swbuf_r+0xa8>)
 8002ef0:	429c      	cmp	r4, r3
 8002ef2:	d1ca      	bne.n	8002e8a <__swbuf_r+0x1e>
 8002ef4:	68ec      	ldr	r4, [r5, #12]
 8002ef6:	e7c8      	b.n	8002e8a <__swbuf_r+0x1e>
 8002ef8:	0021      	movs	r1, r4
 8002efa:	0028      	movs	r0, r5
 8002efc:	f000 f820 	bl	8002f40 <__swsetup_r>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d0ca      	beq.n	8002e9a <__swbuf_r+0x2e>
 8002f04:	2601      	movs	r6, #1
 8002f06:	4276      	negs	r6, r6
 8002f08:	0030      	movs	r0, r6
 8002f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f0c:	08003460 	.word	0x08003460
 8002f10:	08003480 	.word	0x08003480
 8002f14:	08003440 	.word	0x08003440

08002f18 <_write_r>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	0005      	movs	r5, r0
 8002f1c:	0008      	movs	r0, r1
 8002f1e:	0011      	movs	r1, r2
 8002f20:	2200      	movs	r2, #0
 8002f22:	4c06      	ldr	r4, [pc, #24]	; (8002f3c <_write_r+0x24>)
 8002f24:	6022      	str	r2, [r4, #0]
 8002f26:	001a      	movs	r2, r3
 8002f28:	f7fd f97a 	bl	8000220 <_write>
 8002f2c:	1c43      	adds	r3, r0, #1
 8002f2e:	d103      	bne.n	8002f38 <_write_r+0x20>
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d000      	beq.n	8002f38 <_write_r+0x20>
 8002f36:	602b      	str	r3, [r5, #0]
 8002f38:	bd70      	pop	{r4, r5, r6, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	200002ac 	.word	0x200002ac

08002f40 <__swsetup_r>:
 8002f40:	4b36      	ldr	r3, [pc, #216]	; (800301c <__swsetup_r+0xdc>)
 8002f42:	b570      	push	{r4, r5, r6, lr}
 8002f44:	681d      	ldr	r5, [r3, #0]
 8002f46:	0006      	movs	r6, r0
 8002f48:	000c      	movs	r4, r1
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	d005      	beq.n	8002f5a <__swsetup_r+0x1a>
 8002f4e:	69ab      	ldr	r3, [r5, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <__swsetup_r+0x1a>
 8002f54:	0028      	movs	r0, r5
 8002f56:	f7ff fb85 	bl	8002664 <__sinit>
 8002f5a:	4b31      	ldr	r3, [pc, #196]	; (8003020 <__swsetup_r+0xe0>)
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	d10f      	bne.n	8002f80 <__swsetup_r+0x40>
 8002f60:	686c      	ldr	r4, [r5, #4]
 8002f62:	230c      	movs	r3, #12
 8002f64:	5ee2      	ldrsh	r2, [r4, r3]
 8002f66:	b293      	uxth	r3, r2
 8002f68:	0719      	lsls	r1, r3, #28
 8002f6a:	d42d      	bmi.n	8002fc8 <__swsetup_r+0x88>
 8002f6c:	06d9      	lsls	r1, r3, #27
 8002f6e:	d411      	bmi.n	8002f94 <__swsetup_r+0x54>
 8002f70:	2309      	movs	r3, #9
 8002f72:	2001      	movs	r0, #1
 8002f74:	6033      	str	r3, [r6, #0]
 8002f76:	3337      	adds	r3, #55	; 0x37
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	81a3      	strh	r3, [r4, #12]
 8002f7c:	4240      	negs	r0, r0
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
 8002f80:	4b28      	ldr	r3, [pc, #160]	; (8003024 <__swsetup_r+0xe4>)
 8002f82:	429c      	cmp	r4, r3
 8002f84:	d101      	bne.n	8002f8a <__swsetup_r+0x4a>
 8002f86:	68ac      	ldr	r4, [r5, #8]
 8002f88:	e7eb      	b.n	8002f62 <__swsetup_r+0x22>
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <__swsetup_r+0xe8>)
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	d1e8      	bne.n	8002f62 <__swsetup_r+0x22>
 8002f90:	68ec      	ldr	r4, [r5, #12]
 8002f92:	e7e6      	b.n	8002f62 <__swsetup_r+0x22>
 8002f94:	075b      	lsls	r3, r3, #29
 8002f96:	d513      	bpl.n	8002fc0 <__swsetup_r+0x80>
 8002f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	d008      	beq.n	8002fb0 <__swsetup_r+0x70>
 8002f9e:	0023      	movs	r3, r4
 8002fa0:	3344      	adds	r3, #68	; 0x44
 8002fa2:	4299      	cmp	r1, r3
 8002fa4:	d002      	beq.n	8002fac <__swsetup_r+0x6c>
 8002fa6:	0030      	movs	r0, r6
 8002fa8:	f000 f996 	bl	80032d8 <_free_r>
 8002fac:	2300      	movs	r3, #0
 8002fae:	6363      	str	r3, [r4, #52]	; 0x34
 8002fb0:	2224      	movs	r2, #36	; 0x24
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	81a3      	strh	r3, [r4, #12]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	89a2      	ldrh	r2, [r4, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	81a3      	strh	r3, [r4, #12]
 8002fc8:	6923      	ldr	r3, [r4, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10b      	bne.n	8002fe6 <__swsetup_r+0xa6>
 8002fce:	21a0      	movs	r1, #160	; 0xa0
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	89a3      	ldrh	r3, [r4, #12]
 8002fd4:	0089      	lsls	r1, r1, #2
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	400b      	ands	r3, r1
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <__swsetup_r+0xa6>
 8002fde:	0021      	movs	r1, r4
 8002fe0:	0030      	movs	r0, r6
 8002fe2:	f000 f927 	bl	8003234 <__smakebuf_r>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	89a2      	ldrh	r2, [r4, #12]
 8002fea:	4013      	ands	r3, r2
 8002fec:	d011      	beq.n	8003012 <__swsetup_r+0xd2>
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60a3      	str	r3, [r4, #8]
 8002ff2:	6963      	ldr	r3, [r4, #20]
 8002ff4:	425b      	negs	r3, r3
 8002ff6:	61a3      	str	r3, [r4, #24]
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	6923      	ldr	r3, [r4, #16]
 8002ffc:	4283      	cmp	r3, r0
 8002ffe:	d1be      	bne.n	8002f7e <__swsetup_r+0x3e>
 8003000:	230c      	movs	r3, #12
 8003002:	5ee2      	ldrsh	r2, [r4, r3]
 8003004:	0613      	lsls	r3, r2, #24
 8003006:	d5ba      	bpl.n	8002f7e <__swsetup_r+0x3e>
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	4313      	orrs	r3, r2
 800300c:	81a3      	strh	r3, [r4, #12]
 800300e:	3801      	subs	r0, #1
 8003010:	e7b5      	b.n	8002f7e <__swsetup_r+0x3e>
 8003012:	0792      	lsls	r2, r2, #30
 8003014:	d400      	bmi.n	8003018 <__swsetup_r+0xd8>
 8003016:	6963      	ldr	r3, [r4, #20]
 8003018:	60a3      	str	r3, [r4, #8]
 800301a:	e7ed      	b.n	8002ff8 <__swsetup_r+0xb8>
 800301c:	2000000c 	.word	0x2000000c
 8003020:	08003460 	.word	0x08003460
 8003024:	08003480 	.word	0x08003480
 8003028:	08003440 	.word	0x08003440

0800302c <_close_r>:
 800302c:	2300      	movs	r3, #0
 800302e:	b570      	push	{r4, r5, r6, lr}
 8003030:	4c06      	ldr	r4, [pc, #24]	; (800304c <_close_r+0x20>)
 8003032:	0005      	movs	r5, r0
 8003034:	0008      	movs	r0, r1
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	f7fd fbc7 	bl	80007ca <_close>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d103      	bne.n	8003048 <_close_r+0x1c>
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d000      	beq.n	8003048 <_close_r+0x1c>
 8003046:	602b      	str	r3, [r5, #0]
 8003048:	bd70      	pop	{r4, r5, r6, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	200002ac 	.word	0x200002ac

08003050 <__sflush_r>:
 8003050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003052:	898a      	ldrh	r2, [r1, #12]
 8003054:	0005      	movs	r5, r0
 8003056:	000c      	movs	r4, r1
 8003058:	0713      	lsls	r3, r2, #28
 800305a:	d460      	bmi.n	800311e <__sflush_r+0xce>
 800305c:	684b      	ldr	r3, [r1, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	dc04      	bgt.n	800306c <__sflush_r+0x1c>
 8003062:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	dc01      	bgt.n	800306c <__sflush_r+0x1c>
 8003068:	2000      	movs	r0, #0
 800306a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800306c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800306e:	2f00      	cmp	r7, #0
 8003070:	d0fa      	beq.n	8003068 <__sflush_r+0x18>
 8003072:	2300      	movs	r3, #0
 8003074:	682e      	ldr	r6, [r5, #0]
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	6a21      	ldr	r1, [r4, #32]
 800307e:	401a      	ands	r2, r3
 8003080:	d034      	beq.n	80030ec <__sflush_r+0x9c>
 8003082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	075b      	lsls	r3, r3, #29
 8003088:	d506      	bpl.n	8003098 <__sflush_r+0x48>
 800308a:	6863      	ldr	r3, [r4, #4]
 800308c:	1ac0      	subs	r0, r0, r3
 800308e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <__sflush_r+0x48>
 8003094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003096:	1ac0      	subs	r0, r0, r3
 8003098:	0002      	movs	r2, r0
 800309a:	6a21      	ldr	r1, [r4, #32]
 800309c:	2300      	movs	r3, #0
 800309e:	0028      	movs	r0, r5
 80030a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80030a2:	47b8      	blx	r7
 80030a4:	89a1      	ldrh	r1, [r4, #12]
 80030a6:	1c43      	adds	r3, r0, #1
 80030a8:	d106      	bne.n	80030b8 <__sflush_r+0x68>
 80030aa:	682b      	ldr	r3, [r5, #0]
 80030ac:	2b1d      	cmp	r3, #29
 80030ae:	d830      	bhi.n	8003112 <__sflush_r+0xc2>
 80030b0:	4a2b      	ldr	r2, [pc, #172]	; (8003160 <__sflush_r+0x110>)
 80030b2:	40da      	lsrs	r2, r3
 80030b4:	07d3      	lsls	r3, r2, #31
 80030b6:	d52c      	bpl.n	8003112 <__sflush_r+0xc2>
 80030b8:	2300      	movs	r3, #0
 80030ba:	6063      	str	r3, [r4, #4]
 80030bc:	6923      	ldr	r3, [r4, #16]
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	04cb      	lsls	r3, r1, #19
 80030c2:	d505      	bpl.n	80030d0 <__sflush_r+0x80>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <__sflush_r+0x7e>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d100      	bne.n	80030d0 <__sflush_r+0x80>
 80030ce:	6560      	str	r0, [r4, #84]	; 0x54
 80030d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030d2:	602e      	str	r6, [r5, #0]
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d0c7      	beq.n	8003068 <__sflush_r+0x18>
 80030d8:	0023      	movs	r3, r4
 80030da:	3344      	adds	r3, #68	; 0x44
 80030dc:	4299      	cmp	r1, r3
 80030de:	d002      	beq.n	80030e6 <__sflush_r+0x96>
 80030e0:	0028      	movs	r0, r5
 80030e2:	f000 f8f9 	bl	80032d8 <_free_r>
 80030e6:	2000      	movs	r0, #0
 80030e8:	6360      	str	r0, [r4, #52]	; 0x34
 80030ea:	e7be      	b.n	800306a <__sflush_r+0x1a>
 80030ec:	2301      	movs	r3, #1
 80030ee:	0028      	movs	r0, r5
 80030f0:	47b8      	blx	r7
 80030f2:	1c43      	adds	r3, r0, #1
 80030f4:	d1c6      	bne.n	8003084 <__sflush_r+0x34>
 80030f6:	682b      	ldr	r3, [r5, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0c3      	beq.n	8003084 <__sflush_r+0x34>
 80030fc:	2b1d      	cmp	r3, #29
 80030fe:	d001      	beq.n	8003104 <__sflush_r+0xb4>
 8003100:	2b16      	cmp	r3, #22
 8003102:	d101      	bne.n	8003108 <__sflush_r+0xb8>
 8003104:	602e      	str	r6, [r5, #0]
 8003106:	e7af      	b.n	8003068 <__sflush_r+0x18>
 8003108:	2340      	movs	r3, #64	; 0x40
 800310a:	89a2      	ldrh	r2, [r4, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	e7ab      	b.n	800306a <__sflush_r+0x1a>
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	430b      	orrs	r3, r1
 8003116:	2001      	movs	r0, #1
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	4240      	negs	r0, r0
 800311c:	e7a5      	b.n	800306a <__sflush_r+0x1a>
 800311e:	690f      	ldr	r7, [r1, #16]
 8003120:	2f00      	cmp	r7, #0
 8003122:	d0a1      	beq.n	8003068 <__sflush_r+0x18>
 8003124:	680b      	ldr	r3, [r1, #0]
 8003126:	600f      	str	r7, [r1, #0]
 8003128:	1bdb      	subs	r3, r3, r7
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	2300      	movs	r3, #0
 800312e:	0792      	lsls	r2, r2, #30
 8003130:	d100      	bne.n	8003134 <__sflush_r+0xe4>
 8003132:	694b      	ldr	r3, [r1, #20]
 8003134:	60a3      	str	r3, [r4, #8]
 8003136:	9b01      	ldr	r3, [sp, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	dc00      	bgt.n	800313e <__sflush_r+0xee>
 800313c:	e794      	b.n	8003068 <__sflush_r+0x18>
 800313e:	9b01      	ldr	r3, [sp, #4]
 8003140:	003a      	movs	r2, r7
 8003142:	6a21      	ldr	r1, [r4, #32]
 8003144:	0028      	movs	r0, r5
 8003146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003148:	47b0      	blx	r6
 800314a:	2800      	cmp	r0, #0
 800314c:	dc03      	bgt.n	8003156 <__sflush_r+0x106>
 800314e:	2340      	movs	r3, #64	; 0x40
 8003150:	89a2      	ldrh	r2, [r4, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	e7df      	b.n	8003116 <__sflush_r+0xc6>
 8003156:	9b01      	ldr	r3, [sp, #4]
 8003158:	183f      	adds	r7, r7, r0
 800315a:	1a1b      	subs	r3, r3, r0
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	e7ea      	b.n	8003136 <__sflush_r+0xe6>
 8003160:	20400001 	.word	0x20400001

08003164 <_fflush_r>:
 8003164:	690b      	ldr	r3, [r1, #16]
 8003166:	b570      	push	{r4, r5, r6, lr}
 8003168:	0005      	movs	r5, r0
 800316a:	000c      	movs	r4, r1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <_fflush_r+0x10>
 8003170:	2000      	movs	r0, #0
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	2800      	cmp	r0, #0
 8003176:	d004      	beq.n	8003182 <_fflush_r+0x1e>
 8003178:	6983      	ldr	r3, [r0, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <_fflush_r+0x1e>
 800317e:	f7ff fa71 	bl	8002664 <__sinit>
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <_fflush_r+0x4c>)
 8003184:	429c      	cmp	r4, r3
 8003186:	d109      	bne.n	800319c <_fflush_r+0x38>
 8003188:	686c      	ldr	r4, [r5, #4]
 800318a:	220c      	movs	r2, #12
 800318c:	5ea3      	ldrsh	r3, [r4, r2]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ee      	beq.n	8003170 <_fflush_r+0xc>
 8003192:	0021      	movs	r1, r4
 8003194:	0028      	movs	r0, r5
 8003196:	f7ff ff5b 	bl	8003050 <__sflush_r>
 800319a:	e7ea      	b.n	8003172 <_fflush_r+0xe>
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <_fflush_r+0x50>)
 800319e:	429c      	cmp	r4, r3
 80031a0:	d101      	bne.n	80031a6 <_fflush_r+0x42>
 80031a2:	68ac      	ldr	r4, [r5, #8]
 80031a4:	e7f1      	b.n	800318a <_fflush_r+0x26>
 80031a6:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <_fflush_r+0x54>)
 80031a8:	429c      	cmp	r4, r3
 80031aa:	d1ee      	bne.n	800318a <_fflush_r+0x26>
 80031ac:	68ec      	ldr	r4, [r5, #12]
 80031ae:	e7ec      	b.n	800318a <_fflush_r+0x26>
 80031b0:	08003460 	.word	0x08003460
 80031b4:	08003480 	.word	0x08003480
 80031b8:	08003440 	.word	0x08003440

080031bc <_lseek_r>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	0005      	movs	r5, r0
 80031c0:	0008      	movs	r0, r1
 80031c2:	0011      	movs	r1, r2
 80031c4:	2200      	movs	r2, #0
 80031c6:	4c06      	ldr	r4, [pc, #24]	; (80031e0 <_lseek_r+0x24>)
 80031c8:	6022      	str	r2, [r4, #0]
 80031ca:	001a      	movs	r2, r3
 80031cc:	f7fd fb1e 	bl	800080c <_lseek>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d103      	bne.n	80031dc <_lseek_r+0x20>
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d000      	beq.n	80031dc <_lseek_r+0x20>
 80031da:	602b      	str	r3, [r5, #0]
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	200002ac 	.word	0x200002ac

080031e4 <__swhatbuf_r>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	000e      	movs	r6, r1
 80031e8:	001d      	movs	r5, r3
 80031ea:	230e      	movs	r3, #14
 80031ec:	5ec9      	ldrsh	r1, [r1, r3]
 80031ee:	b096      	sub	sp, #88	; 0x58
 80031f0:	0014      	movs	r4, r2
 80031f2:	2900      	cmp	r1, #0
 80031f4:	da07      	bge.n	8003206 <__swhatbuf_r+0x22>
 80031f6:	2300      	movs	r3, #0
 80031f8:	602b      	str	r3, [r5, #0]
 80031fa:	89b3      	ldrh	r3, [r6, #12]
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	d411      	bmi.n	8003224 <__swhatbuf_r+0x40>
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	e00f      	b.n	8003226 <__swhatbuf_r+0x42>
 8003206:	466a      	mov	r2, sp
 8003208:	f000 f8c4 	bl	8003394 <_fstat_r>
 800320c:	2800      	cmp	r0, #0
 800320e:	dbf2      	blt.n	80031f6 <__swhatbuf_r+0x12>
 8003210:	22f0      	movs	r2, #240	; 0xf0
 8003212:	9b01      	ldr	r3, [sp, #4]
 8003214:	0212      	lsls	r2, r2, #8
 8003216:	4013      	ands	r3, r2
 8003218:	4a05      	ldr	r2, [pc, #20]	; (8003230 <__swhatbuf_r+0x4c>)
 800321a:	189b      	adds	r3, r3, r2
 800321c:	425a      	negs	r2, r3
 800321e:	4153      	adcs	r3, r2
 8003220:	602b      	str	r3, [r5, #0]
 8003222:	e7ed      	b.n	8003200 <__swhatbuf_r+0x1c>
 8003224:	2340      	movs	r3, #64	; 0x40
 8003226:	2000      	movs	r0, #0
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	b016      	add	sp, #88	; 0x58
 800322c:	bd70      	pop	{r4, r5, r6, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	ffffe000 	.word	0xffffe000

08003234 <__smakebuf_r>:
 8003234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003236:	2602      	movs	r6, #2
 8003238:	898b      	ldrh	r3, [r1, #12]
 800323a:	0005      	movs	r5, r0
 800323c:	000c      	movs	r4, r1
 800323e:	4233      	tst	r3, r6
 8003240:	d006      	beq.n	8003250 <__smakebuf_r+0x1c>
 8003242:	0023      	movs	r3, r4
 8003244:	3347      	adds	r3, #71	; 0x47
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	6123      	str	r3, [r4, #16]
 800324a:	2301      	movs	r3, #1
 800324c:	6163      	str	r3, [r4, #20]
 800324e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003250:	ab01      	add	r3, sp, #4
 8003252:	466a      	mov	r2, sp
 8003254:	f7ff ffc6 	bl	80031e4 <__swhatbuf_r>
 8003258:	9900      	ldr	r1, [sp, #0]
 800325a:	0007      	movs	r7, r0
 800325c:	0028      	movs	r0, r5
 800325e:	f7ff fa95 	bl	800278c <_malloc_r>
 8003262:	2800      	cmp	r0, #0
 8003264:	d108      	bne.n	8003278 <__smakebuf_r+0x44>
 8003266:	220c      	movs	r2, #12
 8003268:	5ea3      	ldrsh	r3, [r4, r2]
 800326a:	059a      	lsls	r2, r3, #22
 800326c:	d4ef      	bmi.n	800324e <__smakebuf_r+0x1a>
 800326e:	2203      	movs	r2, #3
 8003270:	4393      	bics	r3, r2
 8003272:	431e      	orrs	r6, r3
 8003274:	81a6      	strh	r6, [r4, #12]
 8003276:	e7e4      	b.n	8003242 <__smakebuf_r+0xe>
 8003278:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <__smakebuf_r+0x84>)
 800327a:	62ab      	str	r3, [r5, #40]	; 0x28
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	89a2      	ldrh	r2, [r4, #12]
 8003280:	6020      	str	r0, [r4, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	81a3      	strh	r3, [r4, #12]
 8003286:	9b00      	ldr	r3, [sp, #0]
 8003288:	6120      	str	r0, [r4, #16]
 800328a:	6163      	str	r3, [r4, #20]
 800328c:	9b01      	ldr	r3, [sp, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <__smakebuf_r+0x7a>
 8003292:	230e      	movs	r3, #14
 8003294:	5ee1      	ldrsh	r1, [r4, r3]
 8003296:	0028      	movs	r0, r5
 8003298:	f000 f88e 	bl	80033b8 <_isatty_r>
 800329c:	2800      	cmp	r0, #0
 800329e:	d006      	beq.n	80032ae <__smakebuf_r+0x7a>
 80032a0:	2203      	movs	r2, #3
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	4393      	bics	r3, r2
 80032a6:	001a      	movs	r2, r3
 80032a8:	2301      	movs	r3, #1
 80032aa:	4313      	orrs	r3, r2
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	89a0      	ldrh	r0, [r4, #12]
 80032b0:	4338      	orrs	r0, r7
 80032b2:	81a0      	strh	r0, [r4, #12]
 80032b4:	e7cb      	b.n	800324e <__smakebuf_r+0x1a>
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	08002629 	.word	0x08002629

080032bc <memchr>:
 80032bc:	b2c9      	uxtb	r1, r1
 80032be:	1882      	adds	r2, r0, r2
 80032c0:	4290      	cmp	r0, r2
 80032c2:	d101      	bne.n	80032c8 <memchr+0xc>
 80032c4:	2000      	movs	r0, #0
 80032c6:	4770      	bx	lr
 80032c8:	7803      	ldrb	r3, [r0, #0]
 80032ca:	428b      	cmp	r3, r1
 80032cc:	d0fb      	beq.n	80032c6 <memchr+0xa>
 80032ce:	3001      	adds	r0, #1
 80032d0:	e7f6      	b.n	80032c0 <memchr+0x4>

080032d2 <__malloc_lock>:
 80032d2:	4770      	bx	lr

080032d4 <__malloc_unlock>:
 80032d4:	4770      	bx	lr
	...

080032d8 <_free_r>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	0005      	movs	r5, r0
 80032dc:	2900      	cmp	r1, #0
 80032de:	d010      	beq.n	8003302 <_free_r+0x2a>
 80032e0:	1f0c      	subs	r4, r1, #4
 80032e2:	6823      	ldr	r3, [r4, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da00      	bge.n	80032ea <_free_r+0x12>
 80032e8:	18e4      	adds	r4, r4, r3
 80032ea:	0028      	movs	r0, r5
 80032ec:	f7ff fff1 	bl	80032d2 <__malloc_lock>
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <_free_r+0x90>)
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <_free_r+0x2c>
 80032f8:	6063      	str	r3, [r4, #4]
 80032fa:	6014      	str	r4, [r2, #0]
 80032fc:	0028      	movs	r0, r5
 80032fe:	f7ff ffe9 	bl	80032d4 <__malloc_unlock>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	42a3      	cmp	r3, r4
 8003306:	d909      	bls.n	800331c <_free_r+0x44>
 8003308:	6821      	ldr	r1, [r4, #0]
 800330a:	1860      	adds	r0, r4, r1
 800330c:	4283      	cmp	r3, r0
 800330e:	d1f3      	bne.n	80032f8 <_free_r+0x20>
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	1841      	adds	r1, r0, r1
 8003316:	6021      	str	r1, [r4, #0]
 8003318:	e7ee      	b.n	80032f8 <_free_r+0x20>
 800331a:	0013      	movs	r3, r2
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	2a00      	cmp	r2, #0
 8003320:	d001      	beq.n	8003326 <_free_r+0x4e>
 8003322:	42a2      	cmp	r2, r4
 8003324:	d9f9      	bls.n	800331a <_free_r+0x42>
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	1858      	adds	r0, r3, r1
 800332a:	42a0      	cmp	r0, r4
 800332c:	d10b      	bne.n	8003346 <_free_r+0x6e>
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	1809      	adds	r1, r1, r0
 8003332:	1858      	adds	r0, r3, r1
 8003334:	6019      	str	r1, [r3, #0]
 8003336:	4282      	cmp	r2, r0
 8003338:	d1e0      	bne.n	80032fc <_free_r+0x24>
 800333a:	6810      	ldr	r0, [r2, #0]
 800333c:	6852      	ldr	r2, [r2, #4]
 800333e:	1841      	adds	r1, r0, r1
 8003340:	6019      	str	r1, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	e7da      	b.n	80032fc <_free_r+0x24>
 8003346:	42a0      	cmp	r0, r4
 8003348:	d902      	bls.n	8003350 <_free_r+0x78>
 800334a:	230c      	movs	r3, #12
 800334c:	602b      	str	r3, [r5, #0]
 800334e:	e7d5      	b.n	80032fc <_free_r+0x24>
 8003350:	6821      	ldr	r1, [r4, #0]
 8003352:	1860      	adds	r0, r4, r1
 8003354:	4282      	cmp	r2, r0
 8003356:	d103      	bne.n	8003360 <_free_r+0x88>
 8003358:	6810      	ldr	r0, [r2, #0]
 800335a:	6852      	ldr	r2, [r2, #4]
 800335c:	1841      	adds	r1, r0, r1
 800335e:	6021      	str	r1, [r4, #0]
 8003360:	6062      	str	r2, [r4, #4]
 8003362:	605c      	str	r4, [r3, #4]
 8003364:	e7ca      	b.n	80032fc <_free_r+0x24>
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	200001d8 	.word	0x200001d8

0800336c <_read_r>:
 800336c:	b570      	push	{r4, r5, r6, lr}
 800336e:	0005      	movs	r5, r0
 8003370:	0008      	movs	r0, r1
 8003372:	0011      	movs	r1, r2
 8003374:	2200      	movs	r2, #0
 8003376:	4c06      	ldr	r4, [pc, #24]	; (8003390 <_read_r+0x24>)
 8003378:	6022      	str	r2, [r4, #0]
 800337a:	001a      	movs	r2, r3
 800337c:	f7fd fa08 	bl	8000790 <_read>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d103      	bne.n	800338c <_read_r+0x20>
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d000      	beq.n	800338c <_read_r+0x20>
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	200002ac 	.word	0x200002ac

08003394 <_fstat_r>:
 8003394:	2300      	movs	r3, #0
 8003396:	b570      	push	{r4, r5, r6, lr}
 8003398:	4c06      	ldr	r4, [pc, #24]	; (80033b4 <_fstat_r+0x20>)
 800339a:	0005      	movs	r5, r0
 800339c:	0008      	movs	r0, r1
 800339e:	0011      	movs	r1, r2
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	f7fd fa1c 	bl	80007de <_fstat>
 80033a6:	1c43      	adds	r3, r0, #1
 80033a8:	d103      	bne.n	80033b2 <_fstat_r+0x1e>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d000      	beq.n	80033b2 <_fstat_r+0x1e>
 80033b0:	602b      	str	r3, [r5, #0]
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	200002ac 	.word	0x200002ac

080033b8 <_isatty_r>:
 80033b8:	2300      	movs	r3, #0
 80033ba:	b570      	push	{r4, r5, r6, lr}
 80033bc:	4c06      	ldr	r4, [pc, #24]	; (80033d8 <_isatty_r+0x20>)
 80033be:	0005      	movs	r5, r0
 80033c0:	0008      	movs	r0, r1
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	f7fd fa19 	bl	80007fa <_isatty>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d103      	bne.n	80033d4 <_isatty_r+0x1c>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d000      	beq.n	80033d4 <_isatty_r+0x1c>
 80033d2:	602b      	str	r3, [r5, #0]
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	200002ac 	.word	0x200002ac

080033dc <_init>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr

080033e8 <_fini>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr
